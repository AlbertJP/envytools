TOC

0. Introduction
1. MMIO registers
1.1. NV10
1.2. NV40
1.3. NVC0
2. The PCOUNTER signals
2.1. The STATUS registers
2.2. Trailer signals
2.3. The PM_TRIGGER and WRCACHE_FLUSH signals
2.4. The USER signals
2.5. The PERIODIC signal
3. Input selection
4. Counters
4.1. Counter modes
5. Control registers
6. Single event mode
7. Quad event mode
8. Memory write mode
9. The flag

= Introduction =

PCOUNTER is the card units that contains performance monitoring counters.
It is present on NV10+ GPUs, with the exception of NV11, NV17, NV18 for
unknown reasons [XXX: why? any others excluded? NV1A, NV25, NV2A, NV30, NV36
pending a check].

PCOUNTER is actually made of several identical hardware counter units, one
for each so-called domain. Each PCOUNTER domain can potentially run on
a different source clock, allowing one to monitor events in various clock
domains. The PCOUNTER domains are mostly independent, but there's some
limitted communication and shared circuitry among them.

There are three major revisions of PCOUNTER hardware, and some minor
subrevisions:

 - NV10:NV40 major revision:
  - NV10:NV15 - first version, one domain, only single-event mode available
  - NV15:NV20 - added one period / all periods event counter mode switch
  - NV20:NV30 - added second domain for events associated with memory clock
  - NV30:NV40 - removed separate clrflag/setflag input selection, changed
    from 40-bit to 32-bit counters, added quad event mode, added logic op
    chaining through SETFLAG.
 - NV40:NVC0 major revision:
  - NV40:NV84 - rearranged to make space for 8 domains, added ??? [XXX]
  - NV84:NV92 - added memory dump mode and swap input selection
  - NV92:NVA3 - ??? [XXX]
  - NVA3:NVC0 - added USER signals
 - NVC0+ major revision:
  - NVC0+ - split PCOUNTER into hub, per-gpc and per-partition domain sets,
    ???
[XXX: figure out what else]

The inputs to PCOUNTER are various activity monitoring signals from all over
the card. The PCOUNTER hardware selects a few of them, performs programmable
logic operations on them, and aggregates it to a handful of actual counter
inputs. Some of the inputs are special and control counting start/stop, while
others are the events to be counted. PCOUNTER can be used in three modes:

 - single event mode - a single event is being counted, with fine-grained
   control of counting periods via pre-start/start/stop signals. Several
   counting periods per run may be configured, and a threshold counter may
   be used. The input signals used are:
   - PRE - a programmable amount of pulses on this input must happen before
     START is recognised
   - START - a pulse on this input starts a counting period
   - EVENT - the pulses on this input are counted
   - STOP - a pulse on this input stops a counting period
 - quad event mode [NV30-] - 4 events are being counted, with a simple "swap
   counter sets" trigger to delimit counting periods
   - PRE, START, EVENT, STOP - the pulses on these inputs are counted [in 4
     separate counters]
   - SWAP - a pulse on this input swaps counter sets, ie. copies the internal
     counters to the MMIO registers and resets internal counters to 0.
 - memory write mode [NV84-] - ??? [XXX]

The PCOUNTER uses MMIO area 0x00a000:0x00b000 on NV10:NV40 and NV40:NVC0. On
NVC0+, it uses 0x180000:0x1c0000.

PCOUNTER is unaffected by all PMC.ENABLE bits and has no interrupt lines.


= MMIO registers =

The MMIO registers are similiar among PCOUNTER revisions, but their placement
is very different.


== NV10 ==

The MMIO registers for NV10:NV40 are [i is domain index]:

00a400+i*0x100 PRE_SRC[i] - PRE input selection
00a404+i*0x100 PRE_OP[i] - PRE logic operation
00a408+i*0x100 START_SRC[i] - START input selection
00a40c+i*0x100 START_OP[i] - START logic operation
00a410+i*0x100 EVENT_SRC[i] - EVENT input selection
00a414+i*0x100 EVENT_OP[i] - EVENT logic operation
00a418+i*0x100 STOP_SRC[i] - STOP input selection
00a41c+i*0x100 STOP_OP[i] - STOP logic operation
00a420+i*0x100 SETFLAG_SRC[i] - SETFLAG input selection [NV10:NV30]
00a424+i*0x100 SETFLAG_OP[i] - SETFLAG logic operation
00a428+i*0x100 CLRFLAG_SRC[i] - CLRFLAG input selection [NV10:NV30]
00a42c+i*0x100 CLRFLAG_OP[i] - CLRFLAG logic operation
00a430+i*0x100+j*4,j<4 STATUS[i][j] - input status
00a600+i*0x100 CTR_CYCLES[i] - elapsed cycles counter
00a604+i*0x100 CTR_CYCLES_HI[i] - elapsed cycles counter high bits [NV10:NV30]
00a608+i*0x100 CTR_CYCLES_ALT[i] - CYCLES copy ??? [XXX]
00a60c+i*0x100 CTR_CYCLES_ALT_HI[i] - same, high bits [NV10:NV30]
00a610+i*0x100 CTR_EVENT[i] - EVENT counter
00a614+i*0x100 CTR_EVENT_HI[i] - EVENT counter high bits [NV10:NV30]
00a618+i*0x100 CTR_START[i] - START counter
00a61c+i*0x100 CTR_START_HI[i] - CTR_START high bits [NV10:NV30]
00a620+i*0x100 CTR_PRE[i] - PRE counter
00a624+i*0x100 CTR_STOP[i] - STOP counter
00a628+i*0x100 THRESHOLD[i] - EVENT counter threshold
00a62c+i*0x100 THRESHOLD_HI[i] - THRESHOLD high bits [NV10:NV30]
00a630+i*0x100+(j-4)*4,4<=j<8 STATUS[i][j] - input status, second part
00a738 QUAD_ACK_TRIGGER - used to ack counter data in quad event mode [NV30:NV40]
00a73c CTRL - PCOUNTER control


== NV40 ==

The MMIO registers for NV40:NVC0 are [i is domain index]:

00a400+i*4 PRE_SRC[i] - PRE input selection
00a420+i*4 PRE_OP[i] - PRE logic operation
00a440+i*4 START_SRC[i] - START input selection
00a460+i*4 START_OP[i] - START logic operation
00a480+i*4 EVENT_SRC[i] - EVENT input selection
00a4a0+i*4 EVENT_OP[i] - EVENT logic operation
00a4c0+i*4 STOP_SRC[i] - STOP input selection
00a4e0+i*4 STOP_OP[i] - STOP logic operation
00a500+i*4 SETFLAG_OP[i] - SETFLAG logic operation
00a520+i*4 CLRFLAG_OP[i] - CLRFLAG logic operation
00a540+i*4 SRC_STATUS[i] - selected inputs status
00a560+i*4 SPEC_SRC[i] - SWAP and UNK8 input selection [NV84-]
00a580+i*4 USER_TRIGGER[i] - triggers user-controllable signals [NVA3-]
00a600+i*4 CTR_CYCLES[i] - elapsed cycles counter
00a640+i*4 CTR_CYCLES_ALT[i] - CYCLES copy ??? [XXX]
00a680+i*4 CTR_EVENT[i] - EVENT counter
00a6a0+i*4 ??? [XXX]
00a6c0+i*4 CTR_START[i] - START counter
00a6e0+i*4 ??? [XXX]
00a700+i*4 CTR_PRE[i] - PRE counter
00a720+i*4 ??? [XXX]
00a740+i*4 CTR_STOP[i] - STOP counter
00a760+i*4 ??? [XXX]
00a780+i*4 THRESHOLD[i] - EVENT counter threshold
00a7a0 CHANNEL - VM channel for memory write mode [NV84-]
00a7a4 DMAOBJ - DMA object for memory write mode [NV84-]
00a7a8 ??? [XXX]
00a7c0+i*4 CTRL - PCOUNTER control
00a7e0+i*4 QUAD_ACK_TRIGGER - used to ack counter data in quad event mode
00a800+i*0x20+j*4,j<8 STATUS[i][j] - input status


== NVC0 ==

[XXX: write me]


= The PCOUNTER signals =

The raw inputs that PCOUNTER operates on are called "signals". A signal is
a single 0/1 wire sampled on every clock. The signals come from many different
areas of the card and represent various state information. Example signals may
be:

 - is unit X busy? - counting 1s on this signal together with elapsed clock
   cycles will give activity percentage for given unit
 - did microcontroller X execute an instruction this cycle? - counting 1s
   will give the number of executed instructions

The signals are grouped into so-called domains. A domain has a single base
clock and its own counting circuitry - the counting process and counter
registers are per-domain. Domains are further grouped into domain sets.
Domains within a domain set can communicate to a limitted extend. NV10:NVC0
GPUs have a single domain set, while on NVC0+ there's one domain set for each
GPC, one for each partition, and one for all domains not associated with
a GPC/partition.

On NV10:NV20, there's only one domain. On NV20:NV40 there are 2 domains.
On NV40+ there can be up to 8 domains per domain set. On all GPUs, there
can be up to 256 signals per domain. The available signals and domains
depend heavily on the chipset. The signals are packed tightly, so even
a signal common to two GPUs may be at different position between them.
The lists of known domains and signals may be found in nv10-pcounter.txt,
nv40-pcounter.txt and nvc0-pcounter.txt


== The STATUS registers ==

The STATUS registers may be used to peek at the current value of each signal.

MMIO 0x00a430 + i*0x100 + (j >> 2)*0x200 + (j&3)*4: STATUS[i][j] [NV10:NV84]
MMIO 0x00a800 + i*0x20 + j*4: STATUS[i][j] [NV50:NVC0]
MMIO domain_base+0x000 + j*4: STATUS[j] [NVC0+]
  Reading register #j gives current value of signals j*32..j*32+31 as bits
  0..31 of the read value. This register is per-domain [i is the domain id]
  and read-only. Only i and j values corresponding to actually present domains
  and signals are valid.


== Trailer signals ==

A special kind of signals is so-called "trailer signals". These signals are
common for all domains in a domain set. The position of these signals is not
exactly constant between the domains, but their position modulo 0x20 is
[ie. they're at the same position inside a STATUS reg for all domains, but
not necessarily in the same STATUS reg]. Therefore, the position of each
trailer signal here is given as an offset from "trailer base".

The trailer signals for NV10:NV20 are:

base+0x1f: PCOUNTER.FLAG - the flag

For NV20:NV40:

base+0x1d: PGRAPH.PM_TRIGGER - the PM_TRIGGER pulse from PGRAPH
base+0x1e: PCOUNTER.DOM[1].FLAG - the flag from domain 1
base+0x1f: PCOUNTER.DOM[0].FLAG - the flag from domain 0

For NV40:NVC0:

base+0x0d: PCOUNTER.PERIODIC - the PERIODIC signal from current domain [NV84:NVC0]
base+0x0e: PGRAPH.WRCACHE_FLUSH - the WRCACHE_FLUSH pulse from PGRAPH [NV84:NVC0]
base+0x0f: PGRAPH.PM_TRIGGER - the PM_TRIGGER pulse from PGRAPH
base+0x10: PCOUNTER.DOM[7].EVENT - the EVENT input from domain 7
base+0x11: PCOUNTER.DOM[6].EVENT - the EVENT input from domain 6
base+0x12: PCOUNTER.DOM[5].EVENT - the EVENT input from domain 5
base+0x13: PCOUNTER.DOM[4].EVENT - the EVENT input from domain 4
base+0x14: PCOUNTER.DOM[3].EVENT - the EVENT input from domain 3
base+0x15: PCOUNTER.DOM[2].EVENT - the EVENT input from domain 2
base+0x16: PCOUNTER.DOM[1].EVENT - the EVENT input from domain 1
base+0x17: PCOUNTER.DOM[0].EVENT - the EVENT input from domain 0
base+0x18: PCOUNTER.DOM[7].FLAG - the FLAG from domain 7
base+0x19: PCOUNTER.DOM[6].FLAG - the FLAG from domain 6
base+0x1a: PCOUNTER.DOM[5].FLAG - the FLAG from domain 5
base+0x1b: PCOUNTER.DOM[4].FLAG - the FLAG from domain 4
base+0x1c: PCOUNTER.DOM[3].FLAG - the FLAG from domain 3
base+0x1d: PCOUNTER.DOM[2].FLAG - the FLAG from domain 2
base+0x1e: PCOUNTER.DOM[1].FLAG - the FLAG from domain 1
base+0x1f: PCOUNTER.DOM[0].FLAG - the FLAG from domain 0

For NVC0+:

base+0x1f..0x22: PCOUNTER.MAIN.???
base+0x23..0x26: PCOUNTER.MAIN.???
base+0x27: PCOUNTER.USER_0 - the USER_0 signal from current domain
base+0x28: PCOUNTER.USER_1
base+0x29: PCOUNTER.USER_2
base+0x2a: PCOUNTER.USER_3
base+0x2b: PGRAPH - ???
base+0x2c: PCOUNTER.PAUSED - 1 if this domain is in the PAUSED state [XXX]
base+0x2d: ???
base+0x2e: PCOUNTER.PERIODIC - the PERIODIC signal from current domain
base+0x2f: ???
base+0x30: PCOUNTER.DOM[7].EVENT - the EVENT input from domain 7
base+0x31: PCOUNTER.DOM[6].EVENT - the EVENT input from domain 6
base+0x32: PCOUNTER.DOM[5].EVENT - the EVENT input from domain 5
base+0x33: PCOUNTER.DOM[4].EVENT - the EVENT input from domain 4
base+0x34: PCOUNTER.DOM[3].EVENT - the EVENT input from domain 3
base+0x35: PCOUNTER.DOM[2].EVENT - the EVENT input from domain 2
base+0x36: PCOUNTER.DOM[1].EVENT - the EVENT input from domain 1
base+0x37: PCOUNTER.DOM[0].EVENT - the EVENT input from domain 0
base+0x38: PCOUNTER.DOM[7].FLAG - the FLAG from domain 7
base+0x39: PCOUNTER.DOM[6].FLAG - the FLAG from domain 6
base+0x3a: PCOUNTER.DOM[5].FLAG - the FLAG from domain 5
base+0x3b: PCOUNTER.DOM[4].FLAG - the FLAG from domain 4
base+0x3c: PCOUNTER.DOM[3].FLAG - the FLAG from domain 3
base+0x3d: PCOUNTER.DOM[2].FLAG - the FLAG from domain 2
base+0x3e: PCOUNTER.DOM[1].FLAG - the FLAG from domain 1
base+0x3f: PCOUNTER.DOM[0].FLAG - the FLAG from domain 0


== The PM_TRIGGER and WRCACHE_FLUSH signals ==

[XXX: write me]


== The USER signals ==

On NVA3:NVC0, each domain has two "user" signals controllable directly by
PCOUNTER's MMIO register. The signals are called USER_0 and USER_1.

MMIO 0x00a580+i*4: USER_TRIGGER [NVA3:NVC0]
  bit 0: value for USER_0
  bit 1: value for USER_1
  bit 2: pulse mode for USER_0 - if set, will reset USER_0 to 0 one cycle
    after setting it to the value of bit 0.
  bit 3: pulse mode for USER_1
  Whenever this register is written, USER_0 signal is set to the value of bit
  0, and USER_1 is set to the value of bit 1. On the next cycle after the
  signal change, the USER signals for which the pulse mode bit is set are
  reset to 0. This register is write-only.

On NVC0+, this number is bumped to 4, the USER_TRIGGER register is read/write,
and the signals are now located in the trailer area.

MMIO dombase+0x0ec: USER_TRIGGER [NVC0-]
  bits 0-3: value for USER_0..USER_3
  bits 4-7: pulse mode for USER_0..USER_3
  Works like the NVA3 USER_TRIGGER register, except it's also readable. Note
  that bits 0-3 will be auto-cleared by bits 4-7 after one cycle - bits 0-3
  of the read value correspond directly to the signals' current values.

In effect:
  - write value = 0, pulse = any to set signal to 0 indefinitely
  - write value = 1, pulse = 0 to set signal to 1 indefinitely
  - write value = 1, pulse = 1 to set signal to 1 for one pulse only [and then set to 0 indefinitely]


== The PERIODIC signal ==

On NV84+, each domain has a single PERIODIC signal connected to a simple
periodic pulse generator. The pulse generator will generate a single-clock
'1' pulse every X clocks, with X selectable via the CTRL register from
powers of two between 0x400 and 0x10000 clocks. The PERIODIC signal can
also be disabled - it'll output a constant '0' signal in this case.


= Input selection =

Each domain has up to 256 signals, but only a handful of inputs are used for
the counting process. They are:

 - PRE, START, EVENT, STOP: created from 4 individually selected signals
   through an arbitrary 4-input logic operation, used by the counting process
 - CLRFLAG, SETFLAG: likewise created through an arbitrary 4-input logic
   operation, but on NV30+ the logic operation input signal selections are
   shared with PRE/START/EVENT/STOP inputs [NV10:NV30 have separate selections
   like the other inputs]. Used to control the FLAG.
 - SWAP [NV30-]: hardwired to PGRAPH.PM_TRIGGER on NV30:NV84, can be assigned
   to an arbitrary signal [without logic operation] on NV84+. Used by the quad
   event mode.
 - UNK8 [NV84:NVC0]: can be assigned to an arbitrary signal, also without logic
   operation. Purpose unknown [XXX]

Starting with NV30, the SETFLAG input may also be used as an argument to the
EVENT and STOP logic operations, allowing one to construct 7-input logic
operations.

The registers used to select the signals going into the logic operations
are:

MMIO 0x00a400+i*0x100: PRE_SRC[i] [NV10:NV40]
MMIO 0x00a400+i*4: PRE_SRC[i] [NV40:NVC0]
MMIO dombase+0x040: PRE_SRC [NVC0-]
  Selects the 4 signals used as inputs to PRE's logic operation.
  bits 0-7: signal 0
  bits 8-15: signal 1
  bits 16-23: signal 2
  bits 24-31: signal 3
  On NV30+, these signals are also used as inputs to CLRFLAG and SETFLAG logic
  operations.

MMIO 0x00a408+i*0x100: START_SRC[i] [NV10:NV40]
MMIO 0x00a440+i*4: START_SRC[i] [NV40:NVC0]
MMIO dombase+0x048: START_SRC [NVC0-]
  Like PRE_SRC, but for START. On NV30+, these signals are also used as inputs
  to CLRFLAG and SETFLAG logic operations, and are used as a 4-bit integer
  or low 4 bits of 6-bit integer in special counter modes.

MMIO 0x00a410+i*0x100: EVENT_SRC[i] [NV10:NV40]
MMIO 0x00a480+i*4: EVENT_SRC[i] [NV40:NVC0]
MMIO dombase+0x050: EVENT_SRC [NVC0-]
  Like PRE_SRC, but for EVENT. On NV40+, signals 2 and 3 are also used as high
  2 bits of a 6-bit integer in special counter modes, and signals 0 and 1 are
  used as a 2-bit integer.

MMIO 0x00a418+i*0x100: STOP_SRC[i] [NV10:NV40]
MMIO 0x00a4c0+i*4: STOP_SRC[i] [NV40:NVC0]
MMIO dombase+0x058: STOP_SRC [NVC0-]
  Like PRE_SRC, but for STOP.

MMIO 0x00a420+i*0x100: SETFLAG_SRC[i] [NV10:NV30]
  Like PRE_SRC, but for SETFLAG.

MMIO 0x00a428+i*0x100: CLRFLAG_SRC[i] [NV10:NV30]
  Like PRE_SRC, but for CLRFLAG.

For convenience, the status of all 16 source signals can be checked by reading
the SRC_STATUS register on NV40+:

MMIO 0x00a540+i*4: SRC_STATUS[i] [NV40:NVC0]
MMIO dombase+0x068: SRC_STATUS [NVC0-]
  bits 0-3: current state of PRE_SRC signals 0-3
  bits 4-7: current state of START_SRC signals 0-3
  bits 8-11: current state of EVENT_SRC signals 0-3
  bits 12-15: current state of STOP_SRC signals 0-3

The registers selecting the actual logic operation are:

MMIO 0x00a400+i*0x100: PRE_OP[i] [NV10:NV40]
MMIO 0x00a400+i*4: PRE_OP[i] [NV40:NVC0]
MMIO dombase+0x040: PRE_OP [NVC0-]
  bits 0-15: the logic operation to perform on the signals selected by PRE_SRC
  bit 16: if set, argument 0 of the logic operation is delayed by 1 clock cycle
  bit 17: if set, argument 1 of the logic operation is delayed by 1 clock cycle
  bits 18-19: ??? [XXX]
[XXX: document PRE_OP special behavior]

MMIO 0x00a408+i*0x100: START_OP[i] [NV10:NV40]
MMIO 0x00a440+i*4: START_OP[i] [NV40:NVC0]
MMIO dombase+0x048: START_OP [NVC0-]
  bits 0-15: the logic operation to perform on the signals selected by START_SRC
  bit 16: if set, argument 0 of the logic operation is delayed by 1 clock cycle
  bit 17: if set, argument 1 of the logic operation is delayed by 1 clock cycle
  bits 18-19: ??? [XXX]

MMIO 0x00a410+i*0x100: EVENT_OP[i] [NV10:NV40]
MMIO 0x00a480+i*4: EVENT_OP[i] [NV40:NVC0]
MMIO dombase+0x050: EVENT_OP [NVC0-]
  bits 0-15: the logic operation to perform on the signals selected by EVENT_SRC
  bit 16: if set, argument 0 of the logic operation is delayed by 1 clock cycle
  bit 17: if set, argument 1 of the logic operation is delayed by 1 clock cycle
  bit 18: selects argument 3 of the logic operation [NV30-]:
    0: EVENT_SRC[3]
    1: SETFLAG
  bits 19-20: ??? [XXX]

MMIO 0x00a418+i*0x100: STOP_OP[i] [NV10:NV40]
MMIO 0x00a4c0+i*4: STOP_OP[i] [NV40:NVC0]
MMIO dombase+0x058: STOP_OP [NVC0-]
  bits 0-15: the logic operation to perform on the signals selected by STOP_SRC
  bit 16: if set, argument 0 of the logic operation is delayed by 1 clock cycle
  bit 17: if set, argument 1 of the logic operation is delayed by 1 clock cycle
  bit 18: selects argument 3 of the logic operation [NV30-]:
    0: STOP_SRC[3]
    1: SETFLAG
  bits 19-20: ??? [XXX]

MMIO 0x00a424+i*0x100: SETFLAG_OP[i] [NV10:NV40]
MMIO 0x00a500+i*4: SETFLAG_OP[i] [NV40:NVC0]
MMIO dombase+0x060: SETFLAG_OP [NVC0-]
  bits 0-15: the logic operation to perform. On NV10:NV30, the arguments are
    selected by SETFLAG_SRC. On NV30+, the arguments are: START_SRC[2],
    START_SRC[3], PRE_SRC[0], PRE_SRC[1].
  bit 16: if set, argument 0 of the logic operation is delayed by 1 clock cycle
  bit 17: if set, argument 1 of the logic operation is delayed by 1 clock cycle
  bits 18-19: ??? [XXX]

MMIO 0x00a42c+i*0x100: CLRFLAG_OP[i] [NV10:NV40]
MMIO 0x00a520+i*4: CLRFLAG_OP[i] [NV40:NVC0]
MMIO dombase+0x064: CLRFLAG_OP [NVC0-]
  bits 0-15: the logic operation to perform. On NV10:NV30, the arguments are
    selected by SETFLAG_SRC. On NV30+, the arguments are: PRE_SRC[2],
    PRE_SRC[3], START_SRC[0], START_SRC[1].
  bit 16: if set, argument 0 of the logic operation is delayed by 1 clock cycle
  bit 17: if set, argument 1 of the logic operation is delayed by 1 clock cycle
  bits 18-19: ??? [XXX]

[XXX: check bits 16-20 on NVC0]

The register used to select the SWAP and UNK8 inputs on NV84:NVC0 cards is:

MMIO 0x00a560+i*4: SPEC_SRC[i] [NV84:NVC0]
  bits 0-7: the SWAP signal
  bits 8-15: the UNK8 signal

And on NVC0+:

MMIO dombase+0x06c: SWAP_SRC [NVC0-]
  bits 0-7: the SWAP signal


= Counters =

[XXX: write me]


= Control registers =

[XXX: write me]


= Single event mode =

[XXX: write me]


= Quad event mode =

[XXX: write me]


= Memory write mode =

[XXX: write me]


= The flag =

The FLAG is a single per-domain bit that can be set and cleared via the
SETFLAG and CLRFLAG inputs. On every clock cycle:

 - if CLRFLAG is 1, the FLAG is set to 0
 - if SETFLAG is 1 and CLRFLAG is 0, the FLAG is set to 1
 - if both CLRFLAG and SETFLAG are 0, the FLAG is unchanged

[XXX: interactions of the flag with single event mode]

The current value of the FLAG is available as a common trailer signal to all
domains in the same domain set, allowing complex operations to be performed.
Note however that the effect of CLRFLAG/SETFLAG on the FLAG signal is delayed
by 2 clock cycles - if the SETFLAG input becomes 1 on cycle X, the FLAG signal
will become 1 on cycle X+2.

[XXX: cross-domain flag import stuff]
