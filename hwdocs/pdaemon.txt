TOC

0. Introduction
1. fµc parameters
2. IO space
3. Second-level interrupts
4. User busy indication
5. Host <-> PDAEMON communication
5.1. Submitting data to PDAEMON: FIFO
5.2. Submitting data to host: RFIFO
5.3. Host to PDAEMON scratch register: H2D
5.5. PDAEMON to host scratch register: D2H
5.6. Scratch registers: DSCRATCH
6. Hardware mutexes
7. CRC computation
8. The timer
9. Channel switching
10. Counters
11. Accessing the whole MMIO range
12. PCOUNTER signals


= Introduction =

PDAEMON is a fµc-based engine introduced on NVA3. Its main purpose is
autonomous power and thermal management, but it can be used to oversee any part
of GPU operation. The PDAEMON has many dedicated connections to various parts
of the GPU.

The PDAEMON is made of:

 - a fµc microprocessor core
 - standard fµc memory interface unit
 - a simple channel load interface, replacing the usual PFIFO interface
 - various means of communication betwen fµc and host
 - engine power gating controller
 - "idle" signals from various engines and associated idle counters
 - misc simple input/output signals to various enginesa, with interrupt
   capability
 - a oneshot/periodic timer, using daemon clock or PTIMER as clock source
 - PMC interrupt redirection circuitry
 - indirect MMIO access circuitry
 - direct interface to all PTHERM registers
 - CRC computation hardware
[XXX: and unknown stuff.]

There are 4 revisions of PDAEMON:
 - NVA3:NVC0 - the original revision
 - NVC0:NVD9 - aside from using NVC0 MEMIF, added second set of input/output
   signals and [XXX: some unknown bits]
 - NVD9:NVE4 - changed I[] space layout, added [XXX: what?]
 - NVE4- - a new version of engine power gating controller and [XXX: what?]

[XXX: this file deals mostly with NVA3 version now]


= fµc parameters =

Present on:
	d0: NVA3:NVC0
	d1: NVC0:NVD9
	d2: NVD9:NVE4
	d3: NVE4+
BAR0 address: 0x10a000
PMC interrupt line:
	d0: 18
	d1+: 24
PMC enable bit:
	d0: none, use reg 0x22210 instead
	d1+: 13
Version:
	d0,d1: 3
	d2,d3: 4
Code segment size:
	d0: 0x4000
	d1+: 0x6000
Data segment size:
	d0: 0x3000
	d1+: 0x6000
Fifo size:
	d0: 0x10
	d1+: 3
Xfer slots:
	d0,d1: 8
	d2,d3: 0x10
Secretful: no
Code TLB index bits:
	d0,d1: 8
	d2,d3: 9
Code ports: 1
Data ports: 4
Version 4 unknown bits: 27, 29, 30, 31
Core clock: daemon clock

Interrupts:
  8: [E] MEMIF_TARGET_INVALID [NVA3:NVC0] [fuc-memif.txt]
  9: [E] MEMIF_FAULT [NVA3:NVC0] [fuc-memif.txt]
 10: [L] PMC_DAEMON - PMC interrupts routed to PDAEMON via INTR_DAEMON [pmc.txt]
 11: [L] SUBINTR - comes from SUBINTR interupt aggregator
 12: [L] THERM - PTHERM subinterrupts routed to PDAEMON [ptherm.txt]
 13: [L] SIGNAL - input signal rise/fall interrupts, comes from SIGNAL_*_INTR
 14: [L] TIMER - the timer interrupt, comes from TIMER_INTR
 15: [L] PMC_REDIRECT - PMC interrupts routed via INTR and redirected to
         PDAEMON by IREDIR

Status bits:
  0: fµc [fuc-proc.txt]
  1: ??? [XXX]
  2: ??? [XXX]
  3: MEMIF [fuc-memif.txt]
  4: USER


= IO register space =

On NVA3:NVD9, PDAEMON uses the "classic" fµc addressing scheme: I[] space
addresses are shifted left by 6 wrt the offsets in MMIO window - ie. I[0x12300]
can be accessed through MMIO address 0x10a48c, and registers are usually 0x100
bytes apart in the I[] space and aliased over that 0x100-byte range to be
easily accessible by MMIO. On NVD9+, however, I[] addresses correspond directly
to offsets in MMIO window - I[0x48c] can be accessed through MMIO 0x10a48c.

The following registers/register ranges exist on PDAEMON [first number is MMIO
offset and I[] address on NVD9+, second is I[] address on NVA3:NVD9]:

000/00000:400/10000  fµc [fuc-io.txt]
404/10100  SUBENGINE_RESET_TIME - selects how long to keep parts in reset
           after SUBENGINE_RESET [XXX: doc]
408/10200  SUBENGINE_RESET_MASK - selects parts affected by SUBENGINE_RESET
           [XXX:doc]
420/10800  USER_BUSY - sets the user-controlled busy flag
424/10900  ??? [0/1/0] [NVD9-]
[XXX: unknown NVD9+ regs here]
47c/11f00  CHSW_REQ - requests a channel switch [XXX: doc]
484/12100  ??? [0/ff07/0]
488/12200  TOKEN_ALLOC - allocates a mutex token
48c/12300  TOKEN_FREE - frees a mutex token
490/12400  CRC_DATA - the data to compute CRC of
494/12500  CRC_STATE - current CRC state
4a0/12800:4b0/12c00  FIFO_PUT - host to PDAEMON fifo head
4b0/12c00:4c0/13000  FIFO_GET - host to PDAEMON fifo tail
4c0/13000  FIFO_INTR - host to PDAEMON fifo interrupt status
4c4/13100  FIFO_INTR_EN - host to PDAEMON fifo interrupt enable
4c8/13200  RFIFO_PUT - PDAEMON to host fifo head
4cc/13300  RFIFO_GET - PDAEMON to host fifo tail
4d0/13400  H2D - host to PDAEMON scratch reg
4d4/13500  H2D_INTR - host to PDAEMON scratch reg interrupt status
4d8/13600  H2D_INTR_EN - host to PDAEMON scratch reg interrupt enable
4dc/13700  D2H - PDAEMON to host scratch reg
4e0/13800  TIMER_START - timer initial tick count
4e4/13900  TIMER_TIME - timer current remaining tick count
4e8/13a00  TIMER_CTRL - timer control
4f0/13c00  ??? [0/f/0, 0/3f/0]
4f8/13e00  ??? [0/11/0, 0/13/0]
500/14000  COUNTER_SIGNALS [XXX: doc]
504+i*4/14100+i*100  COUNTER_MASK [XXX: doc]
508+i*4/14200+i*100  COUNTER_COUNT [XXX: doc]
50c+i*4/14300+i*100  COUNTER_MODE [XXX: doc]
580/16000:5c0/17000  MUTEX_TOKEN - the current mutex tokens
[XXX: 5c0+]
5d0/17400:5e0/17800  DSCRATCH - scratch registers
5f0/17c00  ??? [0/ffffffff/0]
5f4/17d00  ??? [0/f/0]
600/18000:640/19000  MEMIF [fuc-memif.txt]
[XXX: 660+]
680/1a000  TIMER_INTR - timer interrupt status
684/1a100  TIMER_INTR_EN - timer interrupt enable
688/1a200  SUBINTR - second-level interrupt status
[XXX: finish the list]
800/20000:fe0/40000  THERM [NVA3:NVD9] [ptherm.txt] [XXX: doc]
fe0/-:1000/-  fµc [NVA3:NVD9] [fuc-io.txt]
1000/-:1800/-  THERM [NVD9-] [ptherm.txt] [XXX: doc]

Notes:
 - the last 0x20 bytes of THERM range on NVA3:NVD9 aren't accessible by the
   host, since they're hidden by the overlapping fµc host-only control
   registers
 - the THERM range on NVD9+ is not accessible at all by the host, since its
   base address is above the end of the MMIO window to fµc's I[] space

Neither is a problem in practice, since the host can just access the same
registers via the PTHERM range.


= PCOUNTER signals =

[XXX: write me]

[XXX: discuss mismatched clock thing]

 - TOKEN_ALL_USED
 - TOKEN_NONE_USED
 - TOKEN_FREE
 - TOKEN_ALLOC
 - FIFO_PUT_0_WRITE
 - FIFO_PUT_1_WRITE
 - FIFO_PUT_2_WRITE
 - FIFO_PUT_3_WRITE


= Second-level interrupts =

Because fµc has space for only 8 engine interrupts and PDAEMON needs many
more, a second-level interrupt register was introduced:

MMIO 0x688 / I[0x1a200]: SUBINTR
  bit 0: H2D - host to PDAEMON scratch register written [see H2D_INTR]
  bit 1: FIFO - host to PDAEMON fifo pointer updated [see FIFO_INTR]
  bit 2: EPWR_GRAPH - PGRAPH engine power control [XXX]
  bit 3: EPWR_VDEC - video decoding engine power control [XXX]
  bit 4: MMIO - indirect MMIO access error [see MMIO_INTR]
  bit 5: IREDIR_ERR - interrupt redirection error [see IREDIR_INTR]
  bit 6: IREDIR_REQ - interrupt redirection request [see IREDIR_*]
  bit 7: ??? [XXX]
  bit 8: ??? - goes to 0x670 [XXX]
  bit 9: EPWR_PUNK1C1 [NVAF] - PUNK1C1 engine power control [XXX]
  [XXX: more bits here?]
  bit 13: ??? [NVD9-] - goes to 0x888 [XXX]

The second-level interrupts are merged into a single level-triggered interrupt
and delivered to fµc interrupt line 11. This line is asserted whenever any bit
of SUBINTR register is non-0. A given SUBINTR bit is set to 1 whenever the
input second-level interrupt line is 1, but will not auto-clear when the input
line goes back to 0 - only writing 1 to that bit in SUBINTR will clear it.
This effectively means that SUBINTR bits have to be cleared after the
downstream interrupt. Note that SUBINTR has no corresponding enable bit - if
an interrupt needs to be disabled, software should use the enable registers
corresponding to individual second-level interrupts instead.


= User busy indication =

To enable the microcode to set the "PDAEMON is busy" flag without actually
making any PDAEMON subunit perform computation, bit 4 of the fµc status
register is connected to a dummy unit whose busy status is controlled directly
by the user:

MMIO 0x420 / I[0x10800]: USER_BUSY
  Read/write, only bit 0 is valid. If set, fµc status line 4 [USER] is set to 1
  [busy], otherwise it's set to 0 [idle].

[XXX: what could possibly use PDAEMON's busy status?]


= Host <-> PDAEMON communication =

There are 4 PDAEMON-specific channels that can be used for communication
between the host and PDAEMON:

 - FIFO: data submission from host to PDAEMON on 4 independent FIFOs in data
   segment, with interrupts generated whenever the PUT register is written
 - RFIFO: data submission from PDAEMON to host on through a FIFO in data
   segment
 - H2D: a single scratch register for host -> PDAEMON communication, with
   interrupts generated whenever it's written
 - D2H: a single scratch register for PDAEMON -> host communication
 - DSCRATCH: 4 scratch registers


== Submitting data to PDAEMON: FIFO ==

These registers are meant to be used for submitting data from host to PDAEMON.
The PUT register is FIFO head, written by host, and GET register is FIFO tail,
written by PDAEMON. Interrupts can be generated whenever the PUT register is
written. How exactly the data buffer works is software's business. Note that
due to very limitted special semantics for FIFO uage, these registers may as
well be used as [possibly interruptful] scratch registers.

MMIO 0x4a0+i*4 / I[0x12800+i*0x100], i<4: FIFO_PUT[i]
  The FIFO head pointer, effectively a 32-bit scratch register. Writing it
  causes bit i of FIFO_INTR to be set.

MMIO 0x4b0+i*4 / I[0x12c00+i*0x100], i<4: FIFO_GET[i]
  The FIFO tail pointer, effectively a 32-bit scratch register.

MMIO 0x4c0 / I[0x13000]: FIFO_INTR
  The status register for FIFO_PUT write interrupts. Write a bit with 1 to
  clear it. Whenever a bit is set both in FIFO_INTR and FIFO_INTR_EN, the FIFO
  [#1] second-level interrupt line to SUBINTR is asserted. Bit i corresponds to
  FIFO #i, and only bits 0-3 are valid.

MMIO 0x4c4 / I[0x13100]: FIFO_INTR_EN
  The enable register for FIFO_PUT write interrupts. Read/write, only 4 low
  bits are valid. Bit assignment is the same as in FIFO_INTR.

In addition, the FIFO circuitry exports four signals to PCOUNTER:
 - FIFO_PUT_0_WRITE: pulses for one cycle whenever FIFO_PUT[0] is written
 - FIFO_PUT_1_WRITE: pulses for one cycle whenever FIFO_PUT[1] is written
 - FIFO_PUT_2_WRITE: pulses for one cycle whenever FIFO_PUT[2] is written
 - FIFO_PUT_3_WRITE: pulses for one cycle whenever FIFO_PUT[3] is written


== Submitting data to host: RFIFO ==

The RFIFO is like one of the 4 FIFOs, except it's supposed to go from PDAEMON
to the host and doesn't have the interupt generation powers.

MMIO 0x4c8 / I[0x13200]: RFIFO_PUT
MMIO 0x4cc / I[0x13300]: RFIFO_GET
  The RFIFO head and tail pointers. Both are effectively 32-bit scratch
  registers.


== Host to PDAEMON scratch register: H2D ==

H2D is a scratch register supposed to be written by the host and read by
PDAEMON. It generates an interrupt when written.

MMIO 0x4d0 / I[0x13400]: H2D
  A 32-bit scratch register. Sets H2D_INTR when written.

MMIO 0x4d4 / I[0x13500]: H2D_INTR 
  The status register for H2D write interrupt. Only bit 0 is valid. Set when
  H2D register is written, cleared when 1 is written to bit 0. When this and
  H2D_INTR_EN are both set, the H2D [#0] second-level interrupt line to
  SUBINTR is asserted.

MMIO 0x4d8 / I[0x13600]: H2D_INTR_EN
  The enable register for H2D write interrupt. Only bit 0 is valid.


== PDAEMON to host scratch register: D2H ==

D2H is just a scratch register supposed to be written by PDAEMON and read by
the host. It has no interrupt genration powers.

MMIO 0x4dc / I[0x13700]: D2H
  A 32-bit scratch register.


== Scratch registers: DSCRATCH ==

DSCRATCH[] are just 4 32-bit scratch registers usable for PDAEMON<->HOST
communication or any other purposes.

MMIO 0x5d0+i*4 / I[0x17400+i*0x100], i<4: DSCRATCH[i]
  A 32-bit scratch register.


= Hardware mutexes =

The PDAEMON has hardware support for 16 busy-waiting mutexes accessed by up to
254 clients simultanously. The clients may be anything able to read and write
the PDAEMON registers - code running on host, on PDAEMON, or on any other fµc
engine with MMIO access powers.

The clients are identified by tokens. Tokens are 8-bit numbers in 0x01-0xfe
range. Tokens may be assigned to clients statically by software, or dynamically
by hardware. Only tokens 0x08-0xfe will be dynamically allocated by hardware
- software may use statically assigned tokens 0x01-0x07 even if dynamic tokens
are in use at the same time. The registers used for dynamic token allocation
are:

MMIO 0x488 / I[0x12200]: TOKEN_ALLOC
  Read-only, each to this register allocates a free token and gives it as the
  read result. If there are no free tokens, 0xff is returned.

MMIO 0x48c / I[0x12300]: TOKEN_FREE
  A write to this register will free a token, ie. return it back to the pool
  used by TOKEN_ALLOC. Only low 8 bits of the written value are used.
  Attempting to free a token outside of the dynamic allocation range
  [0x08-0xff] or a token already in the free queue will have no effect.
  Reading this register will show the last written value, invalid or not.

The free tokens are stored in a FIFO - the freed tokens will be used by
TOKEN_ALLOC in the order of freeing. After reset, the free token FIFO will
contain tokens 0x08-0xfe in ascending order.

The actual mutex locking and unlocking is done by the MUTEX_TOKEN registers:

MMIO 0x580+i*4 / I[0x16000+i*0x100], i<16: MUTEX_TOKEN[i]
  The 16 mutices. A value of 0 means unlocked, any other value means locked
  by the client holding the corresponding token. Only low 8 bits of the written
  value are used. A write of 0 will unlock the mutex and will always succeed.
  A write of 0x01-0xfe will succeed only if the mutex is currently unlocked.
  A write of 0xff is invalid and will always fail. A failed write has no
  effect.

The token allocation circuitry additionally exports four signals to PCOUNTER:

 - TOKEN_ALL_USED: 1 iff all tokens are currently allocated [ie. a read from
   TOKEN_ALLOC would return 0xff]
 - TOKEN_NONE_USED: 1 iff no tokens are currently allocated [ie. tokens
   0x08-0xfe are all in free tokens queue]
 - TOKEN_FREE: pulses for 1 cycle whenever TOKEN_FREE is written, even if with
   invalid value
 - TOKEN_ALLOC: pulses for 1 cycle whenever TOKEN_ALLOC is read, even if
   allocation fails


= CRC computation =

The PDAEMON has a very simple CRC accelerator. Specifically, it can perform
the CRC accumulation operation on 32-bit chunks using the standard CRC-32
polynomial of 0xedb88320. The current CRC residual is stored in the CRC_STATE
register:

MMIO 0x494 / I[0x12500]: CRC_STATE
  The current CRC residual. Read/write.

And the data to add to the CRC is written to the CRC_DATA register:

MMIO 0x490 / I[0x12400]: CRC_DATA
  When written, appends the 32-bit LE value to the running CRC residual in
  CRC_STATE. When read, returns the last value written. Write operation:
	CRC_STATE ^= value;
	for (i = 0; i < 32; i++) {
		if (CRC_STATE & 1) {
			CRC_STATE >>= 1;
			CRC_STATE ^= 0xedb88320;
		} else {
			CRC_STATE >>= 1;
		}
	}

To compute a CRC:
1. Write the initial CRC residue to CRC_STATE
2. Write all data to CRC_DATA, in 32-bit chunks
3. Read CRC_STATE, xor its value with the final constant, use that as the CRC.

If the data block to CRC has size that is not a multiple of 32 bits, the extra
bits at the end [or the beginning] have to be handled manually.


= The timer =

Aside from the usual fµc timers [see fuc-timer.txt], PDAEMON has its own
timer. The timer can be configured as either one-shot or periodic, can run
on either daemon clock or PTIMER clock divided by 64, and generates
interrupts. The following registers deal with the timer:

MMIO 0x4e0 / I[0x13800]: TIMER_START
  The 32-bit count the timer starts counting down from. Read/write. For
  periodic mode, the period will be equal to TIMER_START+1 source cycles.

MMIO 0x4e4 / I[0x13900]: TIMER_TIME
  The current value of the timer, read only. If TIMER_CONTROL.RUNNING is set,
  this will decrease by 1 on every rising edge of the source clock. If such
  rising edge causes this register to become 0, the TIMER_INTR bit 8 [TIMER]
  is set. The behavior of rising edge when this register is already 0 depends
  on the timer mode: in ONESHOT mode, nothing will happen. In PERIODIC mode,
  the timer will be reset to the value from TIMER_START. Note that interrupts
  won't be generated if the timer becomes 0 when copying the value from
  TIMER_START, whether caused by starting the timer or beginning a new PERIODIC
  period. This means that using PERIODIC mode with TIMER_START of 0 will never
  generate any interrupts.

MMIO 0x4e8 / I[0x13a00]: TIMER_CTRL
  bit 0: RUNNING - when 0, the timer is stopped, when 1, the timer is runinng.
    Setting this bit to 1 when it was previously 0 will also copy the
    TIMER_START value to TIMER_TIME.
  bit 4: SOURCE - selects the source clock
    0: DCLK - daemon clock, effectively timer decrements by 1 on every daemon
       cycle
    1: PTIMER_B5 - PTIMER time bit 5 [ie. bit 10 of TIME_LOW]. Since timer
       decrements by 1 on every rising edge of the clock, this effectively
       decrements the counter on every 64th PTIMER clock.
  bit 8: MODE - selects the timer mode
    0: ONESHOT - timer will halt after reaching 0
    1: PERIODIC - timer will restart from TIMER_START after reaching 0

MMIO 0x680 / I[0x1a000]: TIMER_INTR
  bit 8: TIMER - set whenever TIMER_TIME becomes 0 except by a copy from
    TIMER_START, write 1 to this bit to clear it. When this and bit 8
    of TIMER_INTR_EN are set at the same time, fµc interrupt line #14 [TIMER]
    is asserted.

MMIO 0x684 / I[0x1a100]: TIMER_INTR_EN
  bit 8: TIMER - when set, timer interupt delivery to fµc interrupt line 14 is
  enabled.


= Channel switching =

[XXX: write me]

 
= Counters =

XXX: TODO


= Accessing the whole MMIO range =

PDAEMON can access the whole MMIO range through the IO space.

To read from a MMIO address, poke the address into MMIO_ADDR then trigger a read
by poking 0x100f1 to MMIO_CTRL. Wait for MMIO_CTRL's bits 12-14 to be cleared
then read the value from MMIO_VALUE.

To write to a MMIO address, poke the address into MMIO_ADDR, poke the value
to be written into MMIO_VALUE then trigger a write by poking 0x100f2 to
MMIO_CTRL. Wait for MMIO_CTRL's bits 12-14 to be cleared if you want to
make sure the write has been completed.

Accessing an unexisting address will set MMIO_CTRL's bit 13 after MMIO_TIMEOUT
cycles have passed.

NVD9 introduced the possibility to choose from which access point should
the MMIO request be sent. ROOT can access everything, IBUS accesses everything
minus PMC, PBUS, PFIFO, PPCI and a few other top-level MMIO range.
On nvd9+, accessing an un-existing address with the ROOT access point can lead
to a hard-lock.
XXX: What's the point of this feature?

It is possible to get an interrupt when an error occurs by poking 1 to
MMIO_INTR_EN. The interrupt will be fired on line 11. The error is described
in MMIO_ERR.

MMIO 0x7a0 / I[0x1e800]: MMIO_ADDR
  Specifies the MMIO address that will be written to/read from by MMIO_CTRL.

  On nva3-d9, this register only contains the address to be accessed.

  On nvd9, this register became a bitfield:
  bits 0-25: ADDR
  bit 27: ACCESS_POINT
    0: ROOT
    1: IBUS

MMIO 0x7a4 / I[0x1e900]: MMIO_VALUE
  The value that will be written to / is read from MMIO_ADDR when an operation
  is triggered by MMIO_CTRL.

MMIO 0x7a8 / I[0x1e900]: MMIO_TIMEOUT
  Specifies the timeout for MMIO access.
  XXX: Clock source? PDAEMON's core clock, PTIMER's, Host's?

MMIO 0x7ac / I[0x1eb00]: MMIO_CTRL
  Process the MMIO request with given params (MMIO_ADDR, MMIO_VALUE).
  bits 0-1: request
    0: XXX
    1: read
    2: write
    3: XXX
  bits 4-7: BYTE_MASK
  bit 12: BUSY [RO]
  bit 13: TIMEOUT [RO]
  bit 14: FAULT [RO]
  bit 16: TRIGGER

MMIO 0x7b0 / I[0x1ec00] : MMIO_ERR
  Specifies the MMIO error status:
    - TIMEOUT: ROOT/IBUS has not answered PDAEMON's request
    - CMD_WHILE_BUSY: a request has been fired while being busy
    - WRITE: set if the request was a write, cleared if it was a read
    - FAULT: No engine answered ROOT/IBUS's request
  On nva3-d9, clearing MMIO_INTR's bit 0 will also clear MMIO_ERR.
  On nvd9+, clearing MMIO_ERR is done by poking 0xffffffff.

  Nva3-c0:
  bit 0: TIMEOUT
  bit 1: CMD_WHILE_BUSY
  bit 2: WRITE
  bits 3-31: ADDR

  Nvc0-d9:
  bit 0: TIMEOUT
  bit 1: CMD_WHILE_BUSY
  bit 2: WRITE
  bits 3-30: ADDR
  bit 31: FAULT

  Nvd9+:
  bit 0: TIMEOUT_ROOT
  bit 1: TIMEOUT_IBUS
  bit 2: CMD_WHILE_BUSY
  bit 3: WRITE
  bits 4-29: ADDR
  bit 30: FAULT_ROOT
  bit 31: FAULT_IBUS

MMIO 0x7b4 / I[0x1ed00] : MMIO_INTR
  Specifies which MMIO interrupts are active. Clear the associated bit to ACK.
  bit 0: ERR
    Clearing this bit will also clear MMIO_ERR on nva3-d9.

MMIO 0x7b8 / I[0x1ee00] : MMIO_INTR_EN
  Specifies which MMIO interrupts are enabled. Interrupts will be fired on
  line 11 [fuc-intr.txt].
  bit 0: ERR
