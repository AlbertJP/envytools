TOC

0. Introduction
1. NV01/NV03 graph object types
2. Graphics context
2.1. Channel context
2.2. Graph object options
2.2.1. NV01 graph object options
2.2.2. NV03 graph object options
2.2.3. NV04+ graph object structure
3. Notifiers
3.1. NOTIFY method
3.2. DMA_NOTIFY method
3.3. NOP method


= Introduction =

[XXX: write me]

[XXX: WAIT_FOR_IDLE and PM_TRIGGER]


= NV01/NV03 graph object types =

The following graphics objects exist on NV01:NV04:

[1] - NV01:NV03 only
[3] - NV03:NV04 only
no annotation - all NV01:NV04 GPUs

0x01     BETA - sets beta factor for blending		[nv01-ctxobj.txt]
0x02     ROP - sets raster operation			[nv01-ctxobj.txt]
0x03     CHROMA - sets color for color key		[nv01-ctxobj.txt]
0x04     PLANE - sets the plane mask			[nv01-ctxobj.txt]
0x05     CLIP - sets clipping rectangle			[nv01-ctxobj.txt]
0x06     PATTERN - sets pattern, ie. a small repeating	[nv01-ctxobj.txt]
         image used as one of the inputs to a raster
	 operation or blending
0x07 [3] RECT - renders solid rectangles		[nv01-solid.txt]
0x08     POINT - renders single points			[nv01-solid.txt]
0x09     LINE - renders solid lines			[nv01-solid.txt]
0x0a     LIN - renders solid lins [ie. lines missing	[nv01-solid.txt]
         a pixel on one end]
0x0b     TRI - renders solid triangles			[nv01-solid.txt]
0x0c [1] RECT - renders solid rectangles		[nv01-solid.txt]
0x0c [3] GDI - renders Windows 95 primitives:		[nv03-gdi.txt]
         rectangles and characters, with font read
	 from a DMA object			
0x0d [1] TEXLIN - renders quads with linearly mapped	[nv01-tex.txt]
         textures
0x0d [3] M2MF - copies data from one DMA object		[nv03-m2mf.txt]
         to another
0x0e [1] TEXQUAD - renders quads with quadratically	[nv01-tex.txt]
         mapped textures
0x0e [3] SIFM - Scaled Image From Memory, like NV01's	[nv03-sifm.txt]
         IFM, but with scaling
0x10     BLIT - copies rectangles of pixels from one	[nv01-blit.txt]
         place in framebuffer to another	
0x11     IFC - Image From CPU, uploads a rectangle of	[nv01-ifc.txt]
         pixels via methods
0x12     BITMAP - uploads and expands a bitmap [ie.	[nv01-ifc.txt]
         1bpp image] via methods
0x13 [1] IFM - Image From Memory, uploads a rectangle	[nv01-ifm.txt]
         of pixels from a DMA object to framebuffer
0x14     ITM - Image To Memory, downloads a rectangle	[nv01-ifm.txt]
         of pixels to a DMA object from framebuffer
0x15 [3] SIFC - Stretched Image From CPU, like IFC,	[nv01-ifc.txt]
         but with image stretching		
0x17 [3] D3D - Direct3D 5 textured triangles		[nv03-3d.txt]
[XXX: check Direct3D version]
0x18 [3] ZPOINT - renders single points to a surface	[nv03-3d.txt]
         with depth buffer
0x1c [3] SURF - sets rendering surface parameters	[nv01-ctxobj.txt]
0x1d [1] TEXLINBETA - renders lit quads with		[nv01-tex.txt]
         linearly mapped textures
0x1e [1] TEXQUADBETA - renders lit quads with		[nv01-tex.txt]
         quadratically mapped textures


= NV04+ graph object classes =

Not really graph objects, but usable as parameters for some object-bind
methods [all NV04:NVC0]:

0030 NV01_NULL - does nothing				[nv01-graph.txt]
0002 NV01_DMA_R - DMA object for reading		[nv04-dmaobj.txt]
0003 NV01_DMA_W - DMA object for writing		[nv04-dmaobj.txt]
003d NV03_DMA - read/write DMA object			[nv04-dmaobj.txt]

NV01-style operation objects [see nv01-2d.txt] [all NV04:NV05]:

0010 NV01_OP_CLIP - clipping
0011 NV01_OP_BLEND_AND - blending
0013 NV01_OP_ROP_AND - raster operation
0015 NV01_OP_CHROMA - color key	
0064 NV01_OP_SRCCOPY_AND - source copy with 0-alpha discard
0065 NV03_OP_SRCCOPY - source copy
0066 NV04_OP_SRCCOPY_PREMULT - pre-multiplying copy
0067 NV04_OP_BLEND_PREMULT - pre-multiplied blending

Memory to memory copy objects [see nv03-m2mf.txt]:

0039 [NV04:NV50] NV03_M2MF - copies data from one DMA object to another
5039 [NV50:NVC0] NV50_M2MF - copies data from one DMA object to another

Context objects [see nv01-ctxobj.txt]:

0012 [NV04:NV84] NV01_BETA - sets beta factor for blending
0017 [NV04:NV50] NV01_CHROMA - sets color for color key	
0057 [NV04:NV84] NV04_CHROMA - sets color for color key	
0018 [NV04:NV50] NV01_PATTERN - sets pattern for raster op
0044 [NV04:NV84] NV01_PATTERN - sets pattern for raster op
0019 [NV04:NV84] NV01_CLIP - sets user clipping rectangle
0043 [NV04:NV84] NV01_ROP - sets raster operation
0072 [NV04:NV84] NV04_BETA4 - sets component beta factors for pre-multiplied blending
0058 [NV04:NV50] NV03_SURF_DST - sets the 2d destination surface
0059 [NV04:NV50] NV03_SURF_SRC - sets the 2d blit source surface
005a [NV04:NV50] NV03_SURF_COLOR - sets the 3d color surface
005b [NV04:NV50] NV03_SURF_ZETA - sets the 3d zeta surface
0052 [NV04:NV50] NV04_SWZSURF - sets 2d swizzled destination surface
009e [NV10:NV50] NV10_SWZSURF - sets 2d swizzled destination surface
039e [NV30:NV40] NV30_SWZSURF - sets 2d swizzled destination surface
309e [NV40:NV50] NV30_SWZSURF - sets 2d swizzled destination surface
0042 [NV04:NV50] NV04_SURF2D - sets 2d destination and source surfaces
0062 [NV10:NV50] NV10_SURF2D - sets 2d destination and source surfaces
0362 [NV30:NV40] NV30_SURF2D - sets 2d destination and source surfaces
3062 [NV40:NV50] NV30_SURF2D - sets 2d destination and source surfaces
5062 [NV50:NV84] NV50_SURF2D - sets 2d destination and source surfaces
0053 [NV04:NV20] NV04_SURF3D - sets 3d color and zeta surfaces
0093 [NV10:NV20] NV10_SURF3D - sets 3d color and zeta surfaces

Solids rendering objects [see nv01-solid.txt]:

001c [NV04:NV40] NV01_LIN - renders a lin
005c [NV04:NV50] NV04_LIN - renders a lin
035c [NV30:NV40] NV30_LIN - renders a lin
305c [NV40:NV84] NV30_LIN - renders a lin
001d [NV04:NV40] NV01_TRI - renders a triangle
005d [NV04:NV84] NV04_TRI - renders a triangle
001e [NV04:NV40] NV01_RECT - renders a rectangle
005e [NV04:NV40] NV04_RECT - renders a rectangle

Image upload from CPU objects [see nv01-ifc.txt]:

0021 [NV04:NV40] NV01_IFC - image from CPU
0061 [NV04:NV50] NV04_IFC - image from CPU
0065 [NV05:NV50] NV05_IFC - image from CPU
008a [NV10:NV50] NV10_IFC - image from CPU
038a [NV30:NV40] NV30_IFC - image from CPU
308a [NV40:NV84] NV40_IFC - image from CPU
0036 [NV04:NV50] NV01_SIFC - stretched image from CPU
0076 [NV04:NV50] NV04_SIFC - stretched image from CPU
0066 [NV05:NV50] NV05_SIFC - stretched image from CPU
0366 [NV30:NV40] NV30_SIFC - stretched image from CPU
3066 [NV40:NV84] NV40_SIFC - stretched image from CPU
0060 [NV04:NV50] NV04_INDEX - indexed image from CPU
0064 [NV05:NV50] NV05_INDEX - indexed image from CPU
0364 [NV30:NV40] NV30_INDEX - indexed image from CPU
3064 [NV40:NV84] NV40_INDEX - indexed image from CPU
007b [NV10:NV50] NV10_TEXTURE - texture from CPU
037b [NV30:NV40] NV30_TEXTURE - texture from CPU
307b [NV40:NV50] NV40_TEXTURE - texture from CPU
[XXX: figure out wtf is the deal with TEXTURE objects]

Other objects using NV01/NV04-style 2d pipeline:

001f [NV04:NV50] NV01_BLIT - blits inside framebuffer	[nv01-blit.txt]
005f [NV04:NV84] NV04_BLIT - blits inside framebuffer	[nv01-blit.txt]
009f [NV15:NV50] NV15_BLIT - blits inside framebuffer	[nv01-blit.txt]
0037 [NV04:NV50] NV03_SIFM - scaled image from memory	[nv03-sifm.txt]
0077 [NV04:NV50] NV04_SIFM - scaled image from memory	[nv03-sifm.txt]
0063 [NV10:NV50] NV05_SIFM - scaled image from memory	[nv03-sifm.txt]
0089 [NV10:NV40] NV10_SIFM - scaled image from memory	[nv03-sifm.txt]
0389 [NV30:NV40] NV30_SIFM - scaled image from memory	[nv03-sifm.txt]
3089 [NV40:NV50] NV30_SIFM - scaled image from memory	[nv03-sifm.txt]
5089 [NV50:NV84] NV50_SIFM - scaled image from memory	[nv03-sifm.txt]
004b [NV04:NV40] NV03_GDI - draws GDI primitives	[nv03-gdi.txt]
004a [NV04:NV50] NV04_GDI - draws GDI primitives	[nv03-gdi.txt]

2d objects *not* using NV01/NV04-style 2d pipeline:

0038 [NV04:NV50] NV04_DVD_SUBPICTURE - YCbCr blending	[nv04-dvd.txt]
0088 [NV10:NV50] NV10_DVD_SUBPICTURE - YCbCr blending	[nv04-dvd.txt]
[XXX: find better name for these two]
502d [NV50:NVC0] NV50_2D - the NV50+ unified 2d engine	[nv50-2d.txt]

NV03-style 3d objects [see nv03-3d.txt]:

0048 [NV04:NV15] NV03_D3D - Direct3D 5 textured triangles [XXX: check version]
0054 [NV04:NV20] NV04_D3D5 - Direct3D 5 textured triangles
0094 [NV10:NV20] NV10_D3D5 - Direct3D 5 textured triangles
0055 [NV04:NV20] NV04_D3D6 - Direct3D 6 multitextured triangles
0095 [NV10:NV20] NV10_D3D6 - Direct3D 6 multitextured triangles

NV10-style 3d objects:

0056 [NV10:NV30] NV10_3D - Celsius Direct3D 7 engine		[nv10-3d.txt]
0096 [NV10:NV30] NV15_3D - Celsius Direct3D 7 engine		[nv10-3d.txt]
0098 [NV17:NV30] NV11_3D - Celsius Direct3D 7 engine		[nv10-3d.txt]
0099 [NV17:NV20] NV17_3D - Celsius Direct3D 7 engine		[nv10-3d.txt]
0097 [NV20:NV34] NV20_3D - Kelvin Direct3D 8 SM 1 engine	[nv20-3d.txt]
0597 [NV25:NV40] NV25_3D - Kelvin Direct3D 8 SM 1 engine	[nv20-3d.txt]
0397 [NV30:NV40] NV30_3D - Rankine Direct3D 9 SM 2 engine	[nv30-3d.txt]
0497 [NV35:NV34] NV35_3D - Rankine Direct3D 9 SM 2 engine	[nv30-3d.txt]
0697 [NV34:NV40] NV34_3D - Rankine Direct3D 9 SM 2 engine	[nv30-3d.txt]
4097 [NV40:NV50 non-TC] NV40_3D - Curie Direct3D 9 SM 3 engine	[nv40-3d.txt]
4497 [NV40:NV50 TC] NV44_3D - Curie Direct3D 9 SM 3 engine	[nv40-3d.txt]
5097 [NV50:NVA0] NV50_3D - Tesla Direct3D 10 engine		[nv50-3d.txt]
8297 [NV84:NVA0] NV84_3D - Tesla Direct3D 10 engine		[nv50-3d.txt]
8397 [NVA0:NVA3] NVA0_3D - Tesla Direct3D 10 engine		[nv50-3d.txt]
8597 [NVA3:NVAF] NVA3_3D - Tesla Direct3D 10.1 engine		[nv50-3d.txt]
8697 [NVAF:NVC0] NV50_3D - Tesla Direct3D 10.1 engine		[nv50-3d.txt]

And the compute objects:
50c0 [NV50:NVC0] NV50_COMPUTE - CUDA 1.x engine		[nv50-compute.txt]
85c0 [NVA3:NVC0] NVA3_COMPUTE - CUDA 1.x engine		[nv50-compute.txt]


= The graphics context =

[XXX: write something here]


== Channel context ==

The following information makes up non-volatile graphics context. This state
is per-channel and thus will apply to all objects on it, unless software does
trap-swap-restart trickery with object switches. It is guaranteed to be
unaffected by subchannel switches and object binds. Some of this state can be
set by submitting methods on the context objects, some can only be set by
accessing PGRAPH context registers.

 - the beta factor - set by BETA object [XXX: size]
 - the 8-bit raster operation - set by ROP object
 - the A1R10G10B10 color for chroma key - set by CHROMA object
 - the A1R10G10B10 color for plane mask - set by PLANE object
 - the user clip rectangle - set by CLIP object:
   - [XXX: fill me]
 - the pattern state - set by PATTERN object:
   - shape: 8x8, 64x1, or 1x64
   - 2x A8R10G10B10 pattern color
   - the 64-bit pattern itself
 - the NOTIFY DMA object - pointer to DMA object used by NOTIFY methods.
   NV01 only - moved to graph object options on NV03+. Set by direct PGRAPH
   access only.
 - the main DMA object - pointer to DMA object used by IFM and ITM objects.
   NV01 only - moved to graph object options on NV03+. Set by direct PGRAPH
   access only.
 - On NV01, framebuffer setup - set by direct PGRAPH access only:
   - [XXX: fill me]
 - On NV03+, rendering surface setup:
   - [XXX: fill me]
   There are 4 copies of this state, one for each surface used by PGRAPH:
   - DST - the 2d destination surface
   - SRC - the 2d source surface [used by BLIT object only]
   - COLOR - the 3d color surface
   - ZETA - the 3d depth surface
   Note that the M2MF source/destination, ITM destination, IFM/SIFM source,
   and D3D texture don't count as surfaces - even though they may be
   configured to access the same data as surfaces on NV03+, they're accessed
   through the DMA circuitry, not the surface circuitry, and their setup
   is part of volatile state.
 - [XXX: figure out the extra clip stuff, etc.]
 - [XXX: update for NV04+]


== Graph object options ==

In addition to the per-channel state, there is also per-object non-volatile
state, called graph object options. This state is stored in the RAMHT entry
for the object [NV01], or in a RAMIN structure [NV03-]. On subchannel switches
and object binds, the PFIFO will send this state [NV01] or the pointer to this
state [NV03-] to PGRAPH via method 0. On NV01:NV04, this state cannot be
modified by any object methods and requires RAMHT/RAMIN access to change.
On NV04+, PGRAPH can bind DMA objects on its own when requested via methods,
and update the DMA object pointers in RAMIN. On NV05+, PGRAPH can modify
most of this state when requested via methods. All NV04+ automatic options
modification methods can be disabled by software, if so desired.


=== NV01 graph object options ===

On NV01, graph objects come with a 16-bit options field. The field is stored
in the RAMHT structure, and is thus automatically passed to PGRAPH via
method 0 by PFIFO when the active object changes for any reason. The bits in
the options field are:

  bits 0-4: OP - selects the operation to perform on the color from rendering
            pipeline before writing it to the framebuffer
    0x00: RPOP_DS - RPOP(DST, SRC)
    0x01: ROP_SDD - ROP(SRC, DST, DST)
    0x02: ROP_DSD - ROP(DST, SRC, DST)
    0x03: ROP_SSD - ROP(SRC, SRC, DST)
    0x04: ROP_DDS - ROP(DST, DST, SRC)
    0x05: ROP_SDS - ROP(SRC, DST, SRC)
    0x06: ROP_DSS - ROP(DST, SRC, SRC)
    0x07: ROP_SSS - ROP(SRC, SRC, SRC)
    0x08: ROP_SSS_ALT - ROP(SRC, SRC, SRC)
    0x09: ROP_PSS - ROP(PAT, SRC, SRC)
    0x0a: ROP_SPS - ROP(SRC, PAT, SRC)
    0x0b: ROP_PPS - ROP(PAT, PAT, SRC)
    0x0c: ROP_SSP - ROP(SRC, SRC, PAT)
    0x0d: ROP_PSP - ROP(PAT, SRC, PAT)
    0x0e: ROP_SPP - ROP(SRC, PAT, PAT)
    0x0f: RPOP_SP - ROP(SRC, PAT)
    0x10: ROP_DSP - ROP(DST, SRC, PAT)
    0x11: ROP_SDP - ROP(SRC, DST, PAT)
    0x12: ROP_DPS - ROP(DST, PAT, SRC)
    0x13: ROP_PDS - ROP(PAT, DST, SRC)
    0x14: ROP_SPD - ROP(SRC, PAT, DST)
    0x15: ROP_PSD - ROP(PAT, SRC, DST)
    0x17: SRCCOPY - SRC [no operation]
    0x18: BLEND_SS - BLEND(SRC, SRC) [XXX check]
    0x19: BLEND_DS - BLEND(DST, SRC)
    0x1a: BLEND_SD - BLEND(SRC, DST)
    0x1b: BLEND_PS - BLEND(PAT, SRC)
    0x1c: BLEND_SP - BLEND(SRC, PAT)
    0x1d: BLEND_US - BLEND(???, SRC) [XXX]
    0x1e: BLEND_SU - BLEND(SRC, ???) [XXX]
  bit 5: CHROMA - if set, enables the chroma key pipeline stage
  bit 6: PLANE - if set, enables the plane mask pipeline stage [XXX]
  bit 7: CLIP - if set, enables clipping to the user clip rectangle set via
         the CLIP object
  bit 8: NOTIFY_VALID - if set, NOTIFY method will be enabled. If unset, NOTIFY
         method will cause an interrupt. Can be used by the driver to emulate
         per-object DMA_NOTIFY setting - this flag will be set on objects whose
         emulated DMA_NOTIFY value matches the one currently in PGRAPH context,
	 and interrupt will cause a switch of the PGRAPH context value followed
	 by a method restart.
  bits 9-12: COLOR_FORMAT - selects the color format to use for decoding this
         object's methods and data sent to/from DMA objects. Does *not* affect
         framebuffer format - this is decided by PFB.
    0: X1R5G5B5_A1R5G5B5 - 16bpp, 5 bits per channel, maybe 1 bit for alpha
    1: X8R8G8B8_A8R8G8B8 - 32bpp, 8 bits per channel, maybe 8 bits for alpha
    2: X2R10G10B10_A2R10G10B10 - 32bpp, 10 bits per channel, maybe 2 bits for
       alpha
    3: Y8_A8Y8 - 8bpp [no alpha] or 16bpp [alpha], single 8-bit color channel,
       maybe 8 bits for alpha
    4: Y16_A16Y16 - 16bpp [no alpha] or 32bpp [alpha], single 16-bit color
       channel, maybe 16 bits for alpha
  bit 13: ALPHA - enables alpha channel for input. If 0, the color format
          variant without alpha will be used, and alpha value passed down will
	  be forced to full [ie. 0xff]. If 1, the color format variant with
	  alpha will be used.
  bit 14: MONO_FORMAT - selects monochromatic image input format for the
          PATTERN and BITMAP objects:
    0: LE - the leftmost pixel in each byte will be in bit 0, the next one in
          bit 1, and so on.
    1: CGA6 - the leftmost pixel in each byte will be in bit 7, the next one in
          bit 6, and so on.
    In both formats, the leftmost 8 pixels are in byte 0, next 8 pixels in
    byte 1, and so on.
  bit 15: SUBCONTEXT_ID - can be used to emulate more than one PGRAPH context
    on one channel. When an object is bound and its SUBCONTEXT_ID doesn't
    match PGRAPH's current SUBCONTEXT_ID, a context switch interrupt is raised
    to allow software to load an alternate context.


=== NV03 graph object options ===

On NV03, object options were expanded and moved to a memory structure in
RAMIN. The data stored in RAMHT and passed to PGRAPH is just a [shifted]
pointer to the grobj structure. Most importantly, the DMA objects bound
to the graph object are now stored in the options structure and don't have
to be swapped by software on every graphics object switch. The graph
object options structure is made of 3 32-bit words aligned on 0x10-byte
bounduary:

word 0:
  [XXX: figure out the bits, should be similiar to the NV01 options]

word 1:
  bits 0-15: main DMA object. This is used for GDI, SIFM, ITM, D3D, M2MF.
    For M2MF, this is the source [XXX: check] DMA object.
  bits 16-31: NOTIFY DMA object.

word 2:
  bits 0-15: secondary DMA object. This is used for M2MF destination DMA
    object. [XXX: check]

The options structure, and thus also the graph object, is selected by the
structure address in RAMIN shifted right by 4 bits. Thus graph object 0x1234
has its options structure at RAMIN address 0x12340.


=== NV04+ graph object structure ===

[XXX: write me]


== Volatile state ==

In addition to the non-volatile state described above, PGRAPH also has plenty
of "volatile" state. This state deals with the currently requested operation
and may be destroyed by switching to a new subchannel or binding a new object
[though not by full channel switches - the channels are supposed to be
independent after all, and kernel driver is supposed to save/restore all
state, including volatile state].

Volatile state is highly object-specific, but common stuff is listed here:

 - the "notifier write pending" flag and requested notification type
[XXX: more stuff?]


= Notifiers =

The notifiers are 16-byte memory structures accessed via DMA objects, used
for synchronization. Notifiers are written by PGRAPH when certain operations
are completed. Software can poll on the memory structure, waiting for it
to be written by PGRAPH. The notifier structure is:

base+0x0: 64-bit timestamp - written by PGRAPH with current PTIMER time as of
          the notifier write. The timestamp is a concatenation of current
          values of TIME_LOW and TIME_HIGH registers [see ptimer.txt].
          When big-endian mode is in effect, this becomes a 64-bit
	  big-endian number as expected. [XXX: at least on NV50]
base+0x8: 32-bit word always set to 0 by PGRAPH. This field may be used by
          software to put a non-0 value for software-written error-caused
	  notifications.
base+0xc: 32-bit word always set to 0 by PGRAPH. This is used for
          synchronization - the software is supposed to set this field to
	  a non-0 value before submitting the notifier write request,
	  then wait for it to become 0. Since the notifier fields are written
	  in order, it is guaranteed that the whole notifier structure has
	  been written by the time this field is set to 0.

There are two types of notifiers: ordinary notifiers [NV01-] and M2MF notifiers
[NV03-]. Normal notifiers are written when explicitely requested by the NOTIFY
method, M2MF notifiers are written on M2MF transfer completion. M2MF notifiers
cannot be turned off, thus it's required to at least set up a notifier DMA
object if M2MF is used, even if the software doesn't wish to use notifiers
for synchronization.

[XXX: figure out NV20 mysterious warning notifiers]

The notifiers are always written to the currently bound notifier DMA object.
The M2MF notifiers share the DMA object with ordinary notifiers. The layout
of the DMA object used for notifiers is fixed:

0x00: ordinary notifier #0
0x10: M2MF notifier [NV03-]
[XXX: 0x20 - NV20 warning notifier?]
0x20: ordinary notifier #2 [NV03:NV04 only]
0x30: ordinary notifier #3 [NV03:NV04 only]
0x40: ordinary notifier #4 [NV03:NV04 only]
0x50: ordinary notifier #5 [NV03:NV04 only]
0x60: ordinary notifier #6 [NV03:NV04 only]
0x70: ordinary notifier #7 [NV03:NV04 only]
0x80: ordinary notifier #8 [NV03:NV04 only]
0x90: ordinary notifier #9 [NV03:NV04 only]
0xa0: ordinary notifier #10 [NV03:NV04 only]
0xb0: ordinary notifier #11 [NV03:NV04 only]
0xc0: ordinary notifier #12 [NV03:NV04 only]
0xd0: ordinary notifier #13 [NV03:NV04 only]
0xe0: ordinary notifier #14 [NV03:NV04 only]
0xf0: ordinary notifier #15 [NV03:NV04 only]

Note that the notifiers always have to reside at the very beginning of the DMA
object. On NV01 and NV04+, this effectively means that only 1 notifier of each
type can be used per DMA object, requiring mulitple DMA objects if more than
one notifier per type is to be used, and likely requiring a dedicated DMA
object for the notifiers. On NV03:NV04, up to 15 ordinary notifiers may be used
in a single DMA object, though that DMA object likely still needs to be
dedicated for notifiers, and only one of the notifiers supports interrupt
generation.


== NOTIFY method ==

Ordinary notifiers are requested via the NOTIFY method. Note that the NOTIFY
method schedules a notifier write on completion of the method *following* the
NOTIFY - NOTIFY merely sets "a notifier write is pending" state.

It is an error if a NOTIFY method is followed by another NOTIFY method,
a DMA_NOTIFY method, an object bind, or a subchannel switch.

In addition to a notifier write, the NOTIFY method may also request a NOTIFY
interrupt to be triggered on PGRAPH after the notifier write.

mthd 0x104: NOTIFY [all NV01:NVC0 graph objects]
  Requests a notifier write and maybe an interrupt. The write/interrupt will
  be actually performed after the *next* method completes. Possible parameter
  values are:
    0: WRITE - write ordinary notifier #0
    1: WRITE_AND_AWAKEN - write ordinary notifier 0, then trigger NOTIFY
       interrupt [NV03-]
    2: WRITE_2 - write ordinary notifier #2 [NV03:NV04]
    3: WRITE_3 - write ordinary notifier #3 [NV03:NV04]
    [...]
    15: WRITE_15 - write ordinary notifier #15 [NV03:NV04]
Operation:
	if (!cur_grobj.NOTIFY_VALID) {
		/* DMA notify object not set, or needs to be swapped in by sw */
		throw(INVALID_NOTIFY);
	} else if ((param > 0 && chipset == NV01)
			|| (param > 15 && chipset >= NV03 && chipset < NV04)
			|| (param > 1 && chipset >= NV04)) {
		/* XXX: what state is changed? */
		throw(INVALID_VALUE);
	} else if (NOTIFY_PENDING) {
		/* tried to do two NOTIFY methods in row */
		/* XXX: what state is changed? */
		throw(DOUBLE_NOTIFY);
	} else {
		NOTIFY_PENDING = 1;
		NOTIFY_TYPE = param;
	}

After every method other than NOTIFY and DMA_NOTIFY, the following is done:
	if (NOTIFY_PENDING) {
		int idx = NOTIFY_TYPE;
		if (idx == 1)
			idx = 0;
		dma_write64(NOTIFY_DMA, idx*0x10+0x0, PTIMER.TIME_HIGH << 32 | PTIMER.TIME_LOW);
		dma_write32(NOTIFY_DMA, idx*0x10+0x8, 0);
		dma_write32(NOTIFY_DMA, idx*0x10+0xc, 0);
		if (NOTIFY_TYPE == 1)
			irq_trigger(NOTIFY);
		NOTIFY_PENDING = 0;
	}

if a subchannel switch or object bind is done while NOTIFY_PENDING is set,
CTXSW_NOTIFY error is raised.

NOTE: NV01 has a 1-bit NOTIFY_PENDING field, allowing it to do notifier writes
with interrupts, but lacks support for setting it via the NOTIFY method. This
functionality thus has to be emulated by the driver if needed.


== DMA_NOTIFY method ==

On NV04+, the notifier DMA object can be bound by submitting the DMA_NOTIFY
method. This functionality can be disabled by the driver in PGRAPH settings
registers if not desired.

mthd 0x180: DMA_NOTIFY [all NV04:NVC0 graph objects]
  Sets the notifier DMA object. When submitted through PFIFO, this method
  will undergo handle -> address translation via RAMHT.
Operation:
	if (DMA_METHODS_ENABLE) {
		/* XXX: list the validation checks */
		NOTIFY_DMA = param;
	} else {
		throw(INVALID_METHOD);
	}


== NOP method ==

On NV04+ a NOP method was added to enable asking for a notifier write without
having to submit an actual method to the object. The NOP method does nothing,
but still counts as a graph object method and will thus trigger a notifier
write/interrupt if one was previously requested.

mthd 0x100: NOP [all NV04+ graph objects]
  Does nothing.
Operation:
	/* nothing */
[XXX: figure out if this method can be disabled for NV01 compat]
