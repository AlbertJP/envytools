PCOUNTER allows measurement of events of a certain type happening in various areas of the CPU. On NV40+ it's controlled via the PCOUNTER MMIO area (nv40_pcounter.xml).


PCOUNTER has several separate "counter sets" on different families, bound to appropriate clocks:

NV40 IGP:
0: host clock
1: core clock [PGRAPH probably]
2: core clock [shaders probably]
3: unknown, could be the memory interface

NV40 generation with turbocache that are not IGPs:
0: host clock
1: core clock [PGRAPH front]
2: shader clock
3: memory clock

NV40 generation cards without turbocache and NV50:NV84:
0: host clock
1: core clock [PGRAPH front]
2: geometry[?] clock [PGRAPH back]
3: shader clock
4: memory clock

NV84+ IGP have same sets as NV40 cards, except of the memory clock set.
They define the following additional sets
4: misc on core clock
5: video decoding
6: VM and other memory interface stuff on core clock

Other NV84+ define the following on top of NV40:
5: misc on core clock
6: video decoding
7: VM and other memory interface stuff on core clock


= NV40:NVC0 =
Counter sets are independent units exposing different signals. Some example signals are "is PGRAPH idle", "did I execute an instruction during this cycle", "did I get a command from PFIFO during this cycle". Signals within a set are specified by 8-bit ids, and same id may have a different meaning between sets. In each set, up to 4 signals can be measured at the same time.

There are three kinds of quantities that can be measured, depending on the signal: "pulse" mode allows to count number of events, "continuous" mode measures clock cycles (of the specific set's clock) since the event, and finally, it's possible to count total clock cycles (set's clock) since signal was registered (independently from event/cycles count). Some signals allow only "continuous" mode, some allow only "pulse" mode and some allow the user to choose one. Counters are updated only on "reset", therefore it's not possible to read meaningful values while counter is running.

Some signals can be triggered manually, through the means of microcode. In this case, either "pulse" or "continuous" can be chosen. fµc is known to have 6 signals [slots] per engine that can be triggered this way.

* To choose between "continuous" and "pulse" on signals that support it:
    - fµc: use PM_MODE register
    - vp2: use either the PULSE command or the CLEAR/SET commands

* counter reset can be triggered by an arbitrary signal through the SPEC_SRC reg

Internally, event counter is upped every time a relevant bit is set while the event occurs. In "pulse" mode, the bit is cleared immediately, while in "continuous" mode it's not. This bit can be manually manipulated.
The "reset" operation swaps the registers where the actual counting is being done with the registers accessible to user. There are some ways to do the actual counting in the user-accessible register though, controllable by CTRL register.

Each set has corresponding registers in the MMIO area. Registers of the same purpose from different sets are aligned next to each other (e.g. MS0_SRC has base address of PCOUNTER + 0x400, so MS0_SRC for set 1 can be found at PCOUNTER + 0x404).

- MSx_OP: selects signal mode or logical function of a macrosignal
- CLRFLAG_OP and SETFLAG_OP: these are like MSx_OP, and deal with setting/clearing the FLAG, which is a single per-signal bit, which is itself visible as a signal. If SETFLAG_OP evaluates to 1 on a cycle, FLAG is set; if CLRFLAG_OP evaluates to 1, it's cleared; otherwise it's untouched

Signal slot 0 has a special property: on nv84+ cards a write to MS0_OP causes counter reset.


To register a signal in slot S in set X:
1. Set CTRL[X] to 1. (value known to work, not figured out completely yet)
2. Write signal id to MS{S}_SRC[X].
3. Choose signal mode by writing to MS{S}_OP[X].
4. Reset signal counter (not needed if counter reset in previous step).

To read counter values:
1. Reset signal counter.
2. Read CTR_MS{S}[X] for event count.
3. Read [unnamed][X] to get instructions (unnamed is PCOUNTER+0x600 for S == 0).


== Macrosignals ==
In addition to plain signals, there exists a macrosignal mechanism. It allows to combine input from up to 4 signals via an arbitrary logical function and treat it as a regular signal. Up to 4 macrosignal slots can be used.

MSx_SRC sets the 4 signal sources for the logic function for a given macrosignal
MSx_OP sets the logic function

bitidx = signals[MSx_SRC[0]] | signals[MSx_SRC[1]] << 1 |signals[MSx_SRC[2]] << 2 | signals[MSx_SRC[3]] << 3
macrosignal = MSx_OP >> bitidx & 1

=== NV40:NVC0 trailer signals ===

0x0e: PGRAPH.WRCACHE_FLUSH
0x0f: PGRAPH.PM_TRIGGER
0x10: PCOUNTER_S7_MS2
0x11: PCOUNTER_S6_MS2
0x12: PCOUNTER_S5_MS2
0x13: PCOUNTER_S4_MS2
0x14: PCOUNTER_S3_MS2
0x15: PCOUNTER_S2_MS2
0x16: PCOUNTER_S1_MS2
0x17: PCOUNTER_S0_MS2
0x18: PCOUNTER_S7_FLAG
0x19: PCOUNTER_S6_FLAG
0x1a: PCOUNTER_S5_FLAG
0x1b: PCOUNTER_S4_FLAG
0x1c: PCOUNTER_S3_FLAG
0x1d: PCOUNTER_S2_FLAG
0x1e: PCOUNTER_S1_FLAG
0x1f: PCOUNTER_S0_FLAG


=== NV50 signals ===

set 0 [host]:
0x00: PFIFO/host memory write
0x1a: PFIFO/host memory read
0x1c: triple MMIO read???
0x1d: MMIO read [or any BAR?]
0x27: PTIMER_TIME_B12 [ptimer.txt]
0x29: MMIO read or write [or any BAR?]
0x2a: MMIO write [or any BAR?]
0x20 trailer base

set 1 [graph]:
0x3f: VFETCH.JOE related
0x6e: ZCULL
0x73: CSCHED
0x77-0x7e: GSCHED
0x80-0x82: STRMOUT
0x95-0x99: UNK24xx
0xa7: ENG2D
0xb8-0xbb: UNK14xx
0xc8: PGRAPH_IDLE
0xca: PGRAPH_INTR_PENDING
0xd2: CTXCTL flag 0x1c
0xd3: CTXCTL flag 0x1d
0xd4: CTXCTL flag 0x1e
0xd5: CTXCTL flag 0x1f
0xe3-0xe6: UNK1Cxx
0xe0 trailer base

set 2:
0x3a: PVPE
0x5d: memory access
0x5e: happens when reading memory through VGA window?
0x64: memory read [?]
0x68: memory read [?]
0x80: memory access
0x89-0xa6: PVPE
0xac: PFB 100c98
0xad: PFIFO host DMAobj load
0xb8: PFB 100e0c
0xc4: PFIFO/host memory read
0xea: CCACHE
0xe0 trailer base

set 3 [MPs]:
0x20 trailer base

set 4 [mem]:
0x1a: PFB 100008
0x20 trailer base

=== NV98 signals ===

set 0 [host]:
0x04: PFIFO/host memory write
0x28: happens once with PFIFO write or PDISPLAY access [not PFIFO read]
0x2a: PFIFO/host memory read
0x2d: MMIO read [or any BAR?]
0x37: PTIMER_TIME_B12 [ptimer.txt]
0x39: MMIO read or write [or any BAR?]
0x3a: MMIO write [or any BAR?]
0x40 trailer base

set 1 [graph]:
0x31: CSCHED
0x37: UNK24xx
0x4f: ZCULL
0x57-0x59: GSCHED
0x5f: STRMOUT
0x8d: UNK24xx
0x9b-0x9d: ENG2D
0xae-0xb0: UNK14xx
0xbd: PGRAPH_IDLE
0xbf: PGRAPH_INTR_PENDING
0xc7: CTXCTL flag 0x1c
0xc8: CTXCTL flag 0x1d
0xc9: CTXCTL flag 0x1e
0xca: CTXCTL flag 0x1f
0xd9-0xdb: UNK1Cxx
0xe0 trailer base

set 2:
0x36-0x37: ENG2D
0x58: ZCULL
0x60: ENG2D
0x80 trailer base

set 3 [MPs]:
0x20 trailer base

set 5:
0x37: PCRYPT PM_TRIGGER 2nd
0x38: PCRYPT WRCACHE_FLUSH 2nd
0x3b: PCRYPT idle
0x45: PCRYPT PM_TRIGGER
0x46: PCRYPT WRCACHE_FLUSH
0x47-0x4c: PCRYPT USER
0x60 trailer base

set 7:
0x07: something related to MAGIC_FLUSH + PFIFO memory read?
0x22: 16 * PFIFO host DMAobj load
0x23: 16 * PFIFO host DMAobj load
0x24: MAGIC_FLUSH + PFIFO memory read
0x2c: MAGIC_FLUSH + memory access
0x2e: MAGIC_FLUSH + memory access
0x30: MAGIC_FLUSH [misses 1 sometimes?] + memory read
0x32: MAGIC_FLUSH [misses 1 sometimes?] + memory read
0x4c: MAGIC_FLUSH + PFIFO memory read
0x4d: MAGIC_FLUSH
0x65: PBSP PM_TRIGGER 2nd
0x66: PBSP WRCACHE_FLUSH 2nd
0x71: PPPP PM_TRIGGER 2nd
0x72: PPPP WRCACHE_FLUSH 2nd
0x8c: PVP PM_TRIGGER 2nd
0x8d: PVP WRCACHE_FLUSH 2nd
0xa0 trailer base

== NVAC signals ==

set 2:
0xd4-0xd9: PCRYPT_USER_0-5 [fuc-perf.txt]

=== NVA5 signals ===

set 0 [host]:
0x1a: PFIFO writes
0x74: MMIO reads
0x96: PFIFO reads
0x99: MMIO reads
0xa3: PTIMER_TIME_B12 [ptimer.txt]
0xa5: MMIO accesses
0xa6: MMIO writes
0xe0 trailer base

set 1 [graph]:
0x2f: CCACHE_UNK4 ??? [flag 2]
0x30: CCACHE_UNK4 ??? [flag 2]
0x33: CCACHE_UNK5 ??? [flag 2]
0x34: CCACHE_UNK5 ??? [flag 2]
0x37: PGRAPH 24xx ??? [idle?]
0x77: ZCULL ??? [idle?]
0xa9: ENG2D ??? [idle?]
0xab: ENG2D ??? [idle?]
0xbc: PGRAPH 14xx ??? [idle?]
0xbe: PGRAPH 14xx ??? [idle?]
0xca: DISPATCH ???? [idle?]
0xcb: PGRAPH_IDLE
0xcd: PGRAPH_INTR_PENDING
0xd5: CTXCTL flag 0x1c
0xd6: CTXCTL flag 0x1d
0xd7: CTXCTL flag 0x1e
0xd8: CTXCTL flag 0x1f
0xe0 trailer base

set 2:
0x2a: CCACHE ??? [idle?]
0x2c: CCACHE ??? [idle?]
0x49: GSCHED ??? [idle?]
0x4b: GSCHED ??? [idle?]
0x4e: STRMOUT ??? [idle?]
0x50: STRMOUT ??? [idle?]
0x6c: 14xx ??? [idle?]
0x6d: 14xx ??? [idle?]
0xc0 trailer base

set 3 [MP]:
0x20 trailer base

set 6 [vdec]:
0x17: PBSP FIFO idle
0x18: PBSP idle
0x19-0x1b: PBSP uc execution
0x22: PBSP PM_TRIGGER
0x23: PBSP WRCACHE_FLUSH
0x24-0x29: PBSP_USER_0-5 [fuc-perf.txt]
0x2b: PPPP
0x36: PPPP PM_TRIGGER
0x37: PPPP WRCACHE_FLUSH
0x38-0x3d: PPPP_USER_0-5 [fuc-perf.txt]
0x3f: PVP
0x4a: PVP PM_TRIGGER
0x4b: PVP WRCACHE_FLUSH
0x4c-0x51: PVP_USER_0-5 [fuc-perf.txt]
0x54-0x58: PBSP
0x5f-0x7e: PPPP
0x88-0x8b: PVP [vuc?]
0xa0-0xa4: PVP [xfrm? - 4c b3, b5]
0xad-0xaf: PVP [580 - 4c b7]
0xb6: PVP [680 - 4c b8]
0xc0-0xc5: PBSP.CRYPT
0xc0 trailer base


= Known NV50 host signals =

These signals are always on set 0.

signal           |50|84|86|92|94|96|98|a0|aa|ac|a3|a5|a8|af| documentation
-----------------+--+--+--+--+--+--+--+--+--+--+--+--+--+--+---------------
PTIMER_TIME_B12  |27|2c|2c|??|??|37|37|3b|??|53|a3|a3|a3|??| ptimer.txt
[trailer base]   |20|??|40|??|??|??|40|60|??|80|e0|e0|??|??| nv40-pcounter.txt


= Known graph signals =

These signals are always on set 1.

signal           |50|84|86|92|94|96|98|a0|aa|ac|a3|a5|a8|af| documentation
-----------------+--+--+--+--+--+--+--+--+--+--+--+--+--+--+---------------
PGRAPH_IDLE      |c8|bd|bd|??|??|bd|bd|c9|??|c9|cb|cb|cb|??| nv50-pgraph.txt
PGRAPH_INTR      |ca|bf|bf|??|??|bf|bf|cb|??|cb|cd|cd|cd|??| nv50-pgraph.txt
CTXCTL_USER_0    |d2|c7|c7|??|??|c7|c7|d3|??|d3|d5|d5|d5|??| nv50-ctxctl.txt
CTXCTL_USER_1    |d3|c8|c8|??|??|c8|c8|d4|??|d4|d6|d6|d6|??| nv50-ctxctl.txt
CTXCTL_USER_2    |d4|c9|c9|??|??|c9|c9|d5|??|d5|d7|d7|d7|??| nv50-ctxctl.txt
CTXCTL_USER_3    |d5|ca|ca|??|??|ca|ca|d6|??|d6|d8|d8|d8|??| nv50-ctxctl.txt
[trailer base]   |e0|??|e0|??|??|??|e0|e0|??|e0|e0|e0|??|??| nv40-pcounter.txt


= Known set 2 signals =

These signals are always on set 2.

signal           |50|84|86|92|94|96|98|a0|aa|ac|a3|a5|a8|af| documentation
-----------------+--+--+--+--+--+--+--+--+--+--+--+--+--+--+---------------
[trailer base]   |e0|??|80|??|??|??|80|e0|??|e0|c0|c0|??|??| nv40-pcounter.txt


= Known memory signals =

These signals are on set 4 if they're present. IGPs don't have this set.

signal           |50|84|86|92|94|96|98|a0|a3|a5|a8| documentation
-----------------+--+--+--+--+--+--+--+--+--+--+--+---------------
[trailer base]   |20|??|40|??|??|??|40|60|60|60|??| nv40-pcounter.txt


= Known VP2 set 5 signals =

These signals are on set 5 if they're present. Only cards with VP2 have this
set.

signal           |84|86|92|94|96|a0| documentation
-----------------+--+--+--+--+--+--+---------------
PBSP_USER_0      |??|??|??|??|??|00| vp2.txt
PBSP_USER_1      |??|??|??|??|??|01| vp2.txt
PBSP_USER_2      |??|??|??|??|??|02| vp2.txt
PBSP_USER_3      |??|??|??|??|??|03| vp2.txt
PBSP_USER_4      |??|??|??|??|??|04| vp2.txt
PBSP_USER_5      |??|??|??|??|??|05| vp2.txt
PBSP_USER_6      |??|??|??|??|??|06| vp2.txt
PBSP_USER_7      |??|??|??|??|??|07| vp2.txt
PVP_USER_0       |??|??|??|??|??|08| vp2.txt
PVP_USER_1       |??|??|??|??|??|09| vp2.txt
PVP_USER_2       |??|??|??|??|??|0a| vp2.txt
PVP_USER_3       |??|??|??|??|??|0b| vp2.txt
PVP_USER_4       |??|??|??|??|??|0c| vp2.txt
PVP_USER_5       |??|??|??|??|??|0d| vp2.txt
PVP_USER_6       |??|??|??|??|??|0e| vp2.txt
PVP_USER_7       |??|??|??|??|??|0f| vp2.txt
PBSP_VUC_IDLE    |??|??|??|??|??|34| vuc-perf.txt
PBSP_VUC_SLEEP   |??|??|??|??|??|36| vuc-perf.txt
PBSP_VUC_USER    |??|??|??|??|??|3a| vuc-perf.txt
[trailer base]   |??|40|??|??|??|60| nv40-pcounter.txt


= Known VP2 set 6 signals =

These signals are on set 6 if they're present. Only cards with VP2 have this
set.

signal           |84|86|92|94|96|a0| documentation
-----------------+--+--+--+--+--+--+---------------
PVP_USER_0       |??|??|??|??|??|00| vp2.txt
PVP_USER_1       |??|??|??|??|??|01| vp2.txt
PVP_USER_2       |??|??|??|??|??|02| vp2.txt
PVP_USER_3       |??|??|??|??|??|03| vp2.txt
PVP_USER_4       |??|??|??|??|??|04| vp2.txt
PVP_USER_5       |??|??|??|??|??|05| vp2.txt
PVP_USER_6       |??|??|??|??|??|06| vp2.txt
PVP_USER_7       |??|??|??|??|??|07| vp2.txt
[trailer base]   |??|a0|??|??|??|a0| nv40-pcounter.txt


= Known VP3/VP4 set 5 signals =

If these signals are present, they're on set 5 on non-IGPs, set 4 on IGPs.
Only cards with VP3/VP4 have this set.

[XXX: this may not be the same set...]

signal           |98|aa|ac|a3|a5|a8|af| documentation
-----------------+--+--+--+--+--+--+--+---------------
PCOPY_USER_0     |--|--|--|??|2d|??|??| fuc-perf.txt
PCOPY_USER_1     |--|--|--|??|2e|??|??| fuc-perf.txt
PCOPY_USER_2     |--|--|--|??|2f|??|??| fuc-perf.txt
PCOPY_USER_3     |--|--|--|??|30|??|??| fuc-perf.txt
PCOPY_USER_4     |--|--|--|??|31|??|??| fuc-perf.txt
PCOPY_USER_5     |--|--|--|??|32|??|??| fuc-perf.txt
PDAEMON_USER_0   |--|--|--|??|4e|??|??| fuc-perf.txt
PDAEMON_USER_1   |--|--|--|??|4f|??|??| fuc-perf.txt
PDAEMON_USER_2   |--|--|--|??|50|??|??| fuc-perf.txt
PDAEMON_USER_3   |--|--|--|??|51|??|??| fuc-perf.txt
PDAEMON_USER_4   |--|--|--|??|52|??|??| fuc-perf.txt
PDAEMON_USER_5   |--|--|--|??|53|??|??| fuc-perf.txt
[trailer base]   |60|??|00|60|60|??|??| nv40-pcounter.txt


= Known VP3/VP4 set 6 signals =

If these signals are present, they're on set 6 on non-IGPs, set 5 on IGPs.
Only cards with VP3/VP4 have this set.

signal           |98|aa|ac|a3|a5|a8|af| documentation
-----------------+--+--+--+--+--+--+--+---------------
PBSP_IDLE        |12|??|??|??|??|??|??| fuc-perf.txt
PBSP_TA          |15|??|??|??|??|??|??| fuc-perf.txt
PBSP_PM_TRIGGER  |1c|??|??|??|22|??|??| fuc-perf.txt
PBSP_WRCACHE_FL  |1d|??|??|??|23|??|??| fuc-perf.txt
PBSP_USER_0      |1e|??|1e|??|24|??|??| fuc-perf.txt
PBSP_USER_1      |1f|??|1f|??|25|??|??| fuc-perf.txt
PBSP_USER_2      |20|??|20|??|26|??|??| fuc-perf.txt
PBSP_USER_3      |21|??|21|??|27|??|??| fuc-perf.txt
PBSP_USER_4      |22|??|22|??|28|??|??| fuc-perf.txt
PBSP_USER_5      |23|??|23|??|29|??|??| fuc-perf.txt
PPPP_IDLE        |42|??|??|??|??|??|??| fuc-perf.txt
PPPP_TA          |45|??|??|??|??|??|??| fuc-perf.txt
PPPP_PM_TRIGGER  |4c|??|??|??|36|??|??| fuc-perf.txt
PPPP_WRCACHE_FL  |4d|??|??|??|37|??|??| fuc-perf.txt
PPPP_USER_0      |4e|??|4e|??|38|??|??| fuc-perf.txt
PPPP_USER_1      |4f|??|4f|??|39|??|??| fuc-perf.txt
PPPP_USER_2      |50|??|50|??|3a|??|??| fuc-perf.txt
PPPP_USER_3      |51|??|51|??|3b|??|??| fuc-perf.txt
PPPP_USER_4      |52|??|52|??|3c|??|??| fuc-perf.txt
PPPP_USER_5      |53|??|53|??|3d|??|??| fuc-perf.txt
PVP_IDLE         |90|??|??|??|??|??|??| fuc-perf.txt
PVP_TA           |93|??|??|??|??|??|??| fuc-perf.txt
PVP_PM_TRIGGER   |9a|??|??|??|4a|??|??| fuc-perf.txt
PVP_WRCACHE_FL   |9b|??|??|??|4b|??|??| fuc-perf.txt
PVP_USER_0       |9c|??|9c|??|4c|??|??| fuc-perf.txt
PVP_USER_1       |9d|??|9d|??|4d|??|??| fuc-perf.txt
PVP_USER_2       |9e|??|9e|??|4e|??|??| fuc-perf.txt
PVP_USER_3       |9f|??|9f|??|4f|??|??| fuc-perf.txt
PVP_USER_4       |a0|??|a0|??|50|??|??| fuc-perf.txt
PVP_USER_5       |a1|??|a1|??|51|??|??| fuc-perf.txt
[trailer base]   |a0|??|a0|c0|c0|??|??| nv40-pcounter.txt


= Known set 7 signals =

These signals are on set 7 on non-IGPs, set 6 on IGPs. All NV84+ cards have
this set.

signal           |84|86|92|94|96|98|a0|aa|ac|a3|a5|a8|af| documentation
-----------------+--+--+--+--+--+--+--+--+--+--+--+--+--+---------------
[trailer base]   |??|c0|??|??|??|a0|80|??|a0|e0|e0|??|??| nv40-pcounter.txt


