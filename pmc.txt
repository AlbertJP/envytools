Introduction

PMC is the "master control" engine of the card. Its purpose is to provide
card identication, manage enable/disable bits of other engines, and handle
top-level interrupt routing.

The PMC's MMIO range is 0x0000:0x1000. It is always active.


MMIO register list

no annotation - available on all cards
[1] - available on NV11+
[2] - available on NV17+
[3] - available on NV92+?
[4] - available on NV94+
[5] - available on NVA3+
[6] - available on NVC0+
[7] - available on NVC1+

000000    ID			card identification
000004[1] ENDIAN		endian switch
000008[3] BOOT_2		??? [more card identification?]
000100    INTR_HOST		interrupt status - host
000104[5] INTR_UNK1		interrupt status - ???
000108[5] INTR_DAEMON		interrupt status - PDAEMON
000140    INTR_EN_HOST		interrupt enable - host
000144[5] INTR_EN_UNK1		interrupt enable - ???
000148[5] INTR_EN_DAEMON	interrupt enable - PDAEMON
000160    INTR_LN_HOST		interrupt line state - host
000164[5] INTR_LN_UNK1		interrupt line state - ???
000168[5] INTR_LN_DAEMON	interrupt line state - PDAEMON
000200    ENABLE		engine master enable
000204[6] SUBFIFO_ENABLE	PSUBFIFO enables
000208[6] ???			??? [related to enable?]
[XXX: figure out 208]
00020c[7] ???			???
[XXX: figure out 20c]
000260...000274[5] ???		??? related to PFIFO engines
[XXX: figure out 260...]
000300[2] BAR1_HIDE_LOW		BAR1 hidden area low address and enable
000304[2] BAR1_HIDE_HIGH	BAR1 hidden area high address
000640[5] INTR_MASK_HOST	interrupt mask - host
000644[5] INTR_MASK_UNK1	interrupt mask - ???
000648[5] INTR_MASK_PDAEMON	interrupt mask - PDAEMON
000a00[4] NEW_ID		card identification


Card identification

The main register used to identify the card is the ID register. However,
the ID register has different formats depending on the chipset family:

MMIO 0x000000: ID [NV01:NV04]
  bits 0-3: minor revision
  bits 4-7: major revision
    These two bitfields together are also visible as PCI revision. For 
    NV03, revisions equal or higher than 0x20 mean NV03T.
  bits 8-11: implementation - always 1 except on NV02
  bits 12-15: always 0
  bits 16-19: chipset - 1 is NV01, 2 is NV02, 3 is NV03 or NV03T
  bits 20-27: always 0
  bits 28-31: foundry - 0 is SGS, 1 is Helios, 2 is TMSC

MMIO 0x000000: ID [NV04:NV10]
  bits 0-3: ??? [XXX]
  bitd 4-11: always 0
  bits 12-15: architecture - always 4
  bits 16-19: minor revision
  bits 20-23: major revision - 0 is NV04, 1 and 2 are NV05
    These two bitfields together are also visible as PCI revision.
  bits 24-27: always 0
  bits 28-31: foundry - 0 is SGS, 1 is Helios, 2 is TMSC

MMIO 0x000000: ID [NV10-]
  bits 0-7: stepping
  bits 16-19: device id [NV10:NV92]
  bits 15-19: device id [NV92:NVC8]
  bits 12-19: device id [NVC8-] [XXX: check variant transition]
    The value of this bitfield is equal to low 4, 5, or 6 bits of the PCI
    device id. The bitfield size and position changed between cards due to
    varying amount of changeable bits. See pstraps.txt and nvchipset.txt for
    more details.
  bits 20-27: chipset id
    This is THE chipset id that comes after "NV". See nvchipsets.txt for the
    list.
  bits 28-31: ??? [XXX: figure this out]

NV92[?] introduced another identification register in PMC, with unknown
purpose:

MMIO 0x000008: BOOT_2 [NV92?-]
[XXX: what is this? when was it introduced? seen non-0 on at least NV92]

NV94 introduced a new identification register with rearranged bitfields:

MMIO 0x000a00: NEW_ID
  bits 0-7: device id
  bits 8-11: same value as BOOT_2 register
  bits 12-19: stepping [XXX: there are cards where the steppings don't match
              between registers - does this mean something or is it just
	      s random screwup?]
  bits 20-27: chipset id


Endian switch

PMC also contains the endian switch register. The endian switch can be set to
either little or big endian, and affects all accesses to BAR0 and, if present,
BAR2/BAR3 - see nvbars.txt for more details. It is controlled by the ENDIAN
register:

MMIO 0x000004: ENDIAN [NV11-]
  When read, returns 0x01000001 if in big-endian mode, 0 if in little-endian
  mode. When written, if bit 24 of the written value is 1, flips the endian
  switch to the opposite value, otherwise does nothing.

The register operates in such idiosyncratic way because it is itself affected
by the endian switch - thus the read value was chosen to be unaffected by
wrong endian setting, while write behavior was chosen so that writing "1" in
either endianness will switch the card to that endianness.

This register and the endian switch don't exist on pre-NV11 cards - they're
always little-endian.

Note that this switch is also used by NV50+ PFIFO as its default endianness
- see nv50_pfifo.txt for details.

The MMIO areas containing aliases of 8-bit VGA registers are unaffected by
this switch, despite being in BAR0.


Engine enables

[XXX: write me]


Interrupts

[XXX: write me]


BAR1 hidden area

[XXX: write me]
