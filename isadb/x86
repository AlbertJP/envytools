/* pre-cpuid features */

FEATURE op8086		"8086-only features";
FEATURE op80186		"80186+ features";
FEATURE op286		"80286+ features"	IMPLIES op80186;
FEATURE op386		"80386+ features"	IMPLIES op286;
FEATURE op486		"80486+ features"	IMPLIES op386;
FEATURE cpuid		"CPUID instruction"	IMPLIES op486;
FEATURE fpu		"FPU";
FEATURE fpu387		"80387+ FPU"		IMPLIES fpu;
FEATURE fpu486		"80486+ FPU"		IMPLIES fpu387;
FEATURE testreg		"$tr registers"		IMPLIES op386;
FEATURE smm		"System management mode"	IMPLIES op386;

/* cpuid features */

FEATURE lm		"Long mode";
FEATURE ia64		"IA-64 processor in disguise";

FEATURE cmov		"Conditional move/compare instruction";
FEATURE cx8		"CMPXCHG8B instruction";
FEATURE cx16		"CMPXCHG16B instruction";
FEATURE lahf64		"LAHF/SAHF in 64-bit mode";

FEATURE mmx		"MMX extensions";
FEATURE mmxext		"AMD MMX extensions";
FEATURE	_3dnow		"3DNow!";
FEATURE	_3dnowext	"3DNow! extensions";
FEATURE sse		"SSE extensions";
FEATURE sse2		"SSE2 extensions";
FEATURE sse3		"SSE3 extensions";
FEATURE ssse3		"SSSE3 extensions";
FEATURE sse4_1		"SSE4.1 extensions";
FEATURE sse4_2		"SSE4.2 extensions";
FEATURE avx		"AVX extensions";

FEATURE pclmulqdq	"Carryless multiplication";
FEATURE fma		"Fused multiply add";
FEATURE movbe		"MOVBE instruction";
FEATURE popcnt		"POPCNT instruction";
FEATURE aesni		"AESNI extensions";
FEATURE fxsr		"FXSAVE/FXRSTOR";
FEATURE xsave		"XSAVE/XRSTOR state management";
FEATURE rdrand		"RDRAND instruction";

FEATURE tsc		"Time stamp counter";
FEATURE msr		"RDMSR and WRMSR support";
FEATURE sep		"SYSENTER and SYSEXIT";
FEATURE clfsh		"CLFLUSH instruction";
FEATURE monitor		"MONITOR/MWAIT";
FEATURE vmx		"Virtual machine extensions";
FEATURE smx		"Safer mode extensions";
FEATURE syscall		"SYSCALL/SYSRET instructions";
FEATURE rdtscp		"RDTSCP instruction";
FEATURE rdpmc		"RDPMC instruction";

FEATURE nop		"NOP instruction with parameters";

/* execution modes */

MODE pmode "Processor mode" {
	rm		"Real mode or virtual 8086 mode";
	pm		"Protected mode" FEATURE op286;
};

MODE ctype "Code type" {
	m16		"16-bit code";
	m32		"32-bit code" FEATURE op386;
	m64		"64-bit code" FEATURE lm;
};

/* opcode fields */

OPFIELD oszpref 1 DEFZERO;
OPFIELD mszpref 1 DEFZERO;
OPFIELD lockpref 1 DEFZERO;
OPFIELD reppref ENUM {
	null DEFAULT;
	repz;
	repnz;
};
OPFIELD segpref ENUM {
	null DEFAULT;
	es;
	cs;
	ss;
	ds;
	fs;
	gs;
};
OPFIELD rexpresent 1 DEFZERO;
OPFIELD rex 4 DEFZERO BITS {
	0 rexb;
	1 rexx;
	2 rexr;
	3 rexw;
};
OPFIELD op 8;
OPFIELD mrm 8 BITS {
	0:2 rm;
	3:5 reg;
	6:7 mod;
};
OPFIELD sib 8 BITS {
	0:2 sibb;
	3:5 sibi;
	6:7 sibs;
};
OPFIELD d8 8;
OPFIELD d16 16;
OPFIELD d32 32;
OPFIELD d64 64;
OPFIELD i8 8;
OPFIELD i16 16;
OPFIELD i32 32;
OPFIELD i64 64;

FUNC osz ENUM {
	b16;
	b32;
	b64;
} SWITCH {
	MODE m16 oszpref 0:		b16;
	MODE m16 oszpref 1:		b32;
	MODE m32 oszpref 1:		b16;
	MODE m32 oszpref 0:		b32;
	MODE m64 rexw 0 oszpref 1:	b16;
	MODE m64 rexw 0 oszpref 0:	b32;
	MODE m64 rexw 1:		b64;
};

FUNC asz ENUM {
	a16;
	a32;
	a64;
} SWITCH {
	MODE m16 mszpref 0:		a16;
	MODE m16 mszpref 1:		a32;
	MODE m32 mszpref 1:		a16;
	MODE m32 mszpref 0:		a32;
	MODE m64 mszpref 1:		a32;
	MODE m64 mszpref 0:		a64;
};

/* expressions */

EXPR segdds SWITCH {
	segpref null:	$ds;
	segpref null:	#;
	segpref es:	$es;
	segpref cs:	$cs;
	segpref ss:	$ss;
	segpref ds:	$ds;
	segpref fs:	$fs;
	segpref gs:	$gs;
};

EXPR segdss SWITCH {
	segpref null:	$ss;
	segpref null:	#;
	segpref es:	$es;
	segpref cs:	$cs;
	segpref ss:	$ss;
	segpref ds:	$ds;
	segpref fs:	$fs;
	segpref gs:	$gs;
};

EXPR mova_mem SWITCH {
	asz a16:	MEM(IMM(d16) SEGMENT segdds);
	asz a32:	MEM(IMM(d32) SEGMENT segdds);
	asz a64:	MEM(IMM(d64) SEGMENT segdds);
};

EXPR dispa16 SWITCH {
	mod 0:		0;
	mod 1:		IMM(d8 SEX 16);
	mod 2:		IMM(d16);
};

EXPR dispa32 SWITCH {
	mod 0:		0;
	mod 1:		IMM(d8 SEX 32);
	mod 2:		IMM(d32);
};

EXPR dispa64 SWITCH {
	mod 0:		0;
	mod 1:		IMM(d8 SEX 64);
	mod 2:		IMM(d32 SEX 64);
};

MOD ma16 SWITCH {
	MODE m32:	"a16";
	MODE m16:	["a16"];
};

MOD ma32 SWITCH {
	MODE m16|m64:	"a32";
	MODE m32:	["a32"];
};

EXPR mema16 SWITCH {
	rm 0:		MEM($bx + $si + dispa16	SEGMENT segdds MOD ma16);
	rm 1:		MEM($bx + $di + dispa16	SEGMENT segdds MOD ma16);
	rm 2:		MEM($bp + $si + dispa16	SEGMENT segdss MOD ma16);
	rm 3:		MEM($bp + $di + dispa16	SEGMENT segdss MOD ma16);
	rm 4:		MEM($si + dispa16	SEGMENT segdds MOD ma16);
	rm 5:		MEM($di + dispa16	SEGMENT segdds MOD ma16);
	rm 6 mod 0:	MEM(IMM(d16)		SEGMENT segdss MOD ma16);
	rm 6 mod 1-2:	MEM($bp + dispa16	SEGMENT segdss MOD ma16);
	rm 7:		MEM($bx + dispa16	SEGMENT segdds MOD ma16);
};

EXPR sibsi32 SWITCH {
	sibi#rexx 0-3|5-15 sibs 0:	$rd[sibi#rexx] * 1;
	sibi#rexx 0-3|5-15 sibs 1:	$rd[sibi#rexx] * 2;
	sibi#rexx 0-3|5-15 sibs 2:	$rd[sibi#rexx] * 4;
	sibi#rexx 0-3|5-15 sibs 3:	$rd[sibi#rexx] * 8;
	sibi#rexx 4:			0;
};

EXPR mema32 SWITCH {
	rm 0-3|6-7:			MEM($rd[rm#rexb]			+ dispa32	SEGMENT segdds MOD ma32);
	rm 4 sibb 0-4|6-7:		MEM($rd[sibb#rexb]	+ sibsi32	+ dispa32	SEGMENT segdds MOD ma32);
	rm 4 sibb 5 mod 0:		MEM(IMM(d32)		+ sibsi32			SEGMENT segdds MOD ma32 ["abs"]);
	rm 4 sibb 5 mod 1-2:		MEM($rd[sibb#rexb]	+ sibsi32	+ dispa32	SEGMENT segdss MOD ma32);
	rm 5 mod 0 MODE m16|m32:	MEM(IMM(d32)						SEGMENT segdds MOD ma32 ["abs"]);
	rm 5 mod 0 MODE m64:		MEM(IMM(d32 PCREL END)					SEGMENT segdds MOD ma32 "pcrel");
	rm 5 mod 1-2:			MEM($rd[rm#rexb]			+ dispa32	SEGMENT segdss MOD ma32);
};

EXPR sibsi64 SWITCH {
	sibi#rexx 0-3|5-15 sibs 0:	$r[sibi#rexx] * 1;
	sibi#rexx 0-3|5-15 sibs 1:	$r[sibi#rexx] * 2;
	sibi#rexx 0-3|5-15 sibs 2:	$r[sibi#rexx] * 4;
	sibi#rexx 0-3|5-15 sibs 3:	$r[sibi#rexx] * 8;
	sibi#rexx 4:			0;
};

EXPR mema64 SWITCH {
	rm 0-3|6-7:			MEM($r[rm#rexb]				+ dispa64	SEGMENT segdds ["a64"]);
	rm 4 sibb 0-4|6-7:		MEM($r[sibb#rexb]	+ sibsi64	+ dispa64	SEGMENT segdds ["a64"]);
	rm 4 sibb 5 mod 0:		MEM(IMM(d32 SEX 64)	+ sibsi64			SEGMENT segdds ["a64"] ["abs"]);
	rm 4 sibb 5 mod 1-2:		MEM($r[sibb#rexb]	+ sibsi64	+ dispa64	SEGMENT segdss ["a64"]);
	rm 5 mod 0:			MEM(IMM(d32 SEX 64 PCREL END)				SEGMENT segdds ["a64"] "pcrel");
	rm 5 mod 1-2:			MEM($r[rm#rexb]				+ dispa64	SEGMENT segdss ["a64"]);
};

EXPR mem SWITCH {
	/* reject mod 3 now, just in case */
	asz a16 mod 0-2:	mema16;
	asz a32 mod 0-2:	mema32;
	asz a64 mod 0-2:	mema64;
};

EXPR acca SWITCH {
	osz b16:	$ax;
	osz b32:	$eax;
	osz b64:	$rax;
};

EXPR rm8 SWITCH {
	mod 0-2:	mem;
	mod 3:		$rb[rm#rexb];
};

EXPR rm16 SWITCH {
	mod 0-2:	mem;
	mod 3:		$rw[rm#rexb];
};

EXPR rm32 SWITCH {
	mod 0-2:	mem;
	mod 3:		$rd[rm#rexb];
};

EXPR rm64 SWITCH {
	mod 0-2:	mem;
	mod 3:		$r[rm#rexb];
};

EXPR reg8 $rb[reg#rexr];
EXPR reg16 $rw[reg#rexr];
EXPR reg32 $rd[reg#rexr];
EXPR reg64 $r[reg#rexr];
EXPR creg $cr[reg#rexr];
EXPR dreg $dr[reg#rexr];
EXPR treg $tr[reg#rexr];

EXPR opreg8 $rb[op[0:2]#rexr];
EXPR opreg16 $rw[op[0:2]#rexr];
EXPR opreg32 $rd[op[0:2]#rexr];
EXPR opreg64 $r[op[0:2]#rexr];

EXPR rma SWITCH {
	osz b16:	rm16;
	osz b32:	rm32;
	osz b64:	rm64;
};

EXPR rega SWITCH {
	osz b16:	reg16;
	osz b32:	reg32;
	osz b64:	reg64;
};

EXPR oprega SWITCH {
	osz b16:	opreg16;
	osz b32:	opreg32;
	osz b64:	opreg64;
};

EXPR imm8 IMM(i8);
EXPR imm16 IMM(i16);
EXPR imm32 IMM(i32);
EXPR eimm32 IMM(i32 SEX 64);
EXPR imm64 IMM(i64);

EXPR imma SWITCH {
	osz b16:	imm16;
	osz b32:	imm32;
	osz b64:	eimm32;
};

EXPR btarg8s16 IMM(i8 SEX 16 PCREL END);
EXPR btarg8s32 IMM(i8 SEX 32 PCREL END);
EXPR btarg8s64 IMM(i8 SEX 64 PCREL END);
EXPR btarg16 IMM(i16 PCREL END);
EXPR btarg32 IMM(i32 PCREL END);
EXPR btarg32s64 IMM(i32 SEX 64 PCREL END);

EXPR loopreg SWITCH {
	asz a16:	$cx;
	asz a32:	$ecx;
	asz a64:	$rcx;
};

EXPR strdst SWITCH {
	asz a16:	MEM($di SEGMENT $es);
	asz a32:	MEM($edi SEGMENT $es);
	asz a64:	MEM($rdi SEGMENT $es);
};

EXPR strsrc SWITCH {
	asz a16:	MEM($si SEGMENT segdds);
	asz a32:	MEM($esi SEGMENT segdds);
	asz a64:	MEM($rsi SEGMENT segdds);
};

EXPR xlatsrc SWITCH {
	asz a16:	MEM($bx SEGMENT segdds);
	asz a32:	MEM($ebx SEGMENT segdds);
	asz a64:	MEM($rbx SEGMENT segdds);
};

MOD rep SWITCH {
	reppref repz:	"rep";
	reppref null:	/* nothing */;
};

MOD repcc SWITCH {
	reppref repz:	"repz";
	reppref repz:	"repe";
	reppref repnz:	"repnz";
	reppref repnz:	"repne";
	reppref null:	/* nothing */;
};

/* modifiers */

MOD pred SWITCH {
	op[0:3] 0x0:	"o";

	op[0:3] 0x1:	"no";

	op[0:3] 0x2:	"c";
	op[0:3] 0x2:	"b";
	op[0:3] 0x2:	"nae";

	op[0:3] 0x3:	"nc";
	op[0:3] 0x3:	"nb";
	op[0:3] 0x3:	"ae";

	op[0:3] 0x4:	"z";
	op[0:3] 0x4:	"e";

	op[0:3] 0x5:	"nz";
	op[0:3] 0x5:	"ne";

	op[0:3] 0x6:	"na";
	op[0:3] 0x6:	"be";

	op[0:3] 0x7:	"a";
	op[0:3] 0x7:	"nbe";

	op[0:3] 0x8:	"s";

	op[0:3] 0x9:	"ns";

	op[0:3] 0xa:	"p";
	op[0:3] 0xa:	"pe";

	op[0:3] 0xb:	"np";
	op[0:3] 0xb:	"po";

	op[0:3] 0xc:	"l";
	op[0:3] 0xc:	"nge";

	op[0:3] 0xd:	"nl";
	op[0:3] 0xd:	"ge";

	op[0:3] 0xe:	"ng";
	op[0:3] 0xe:	"le";

	op[0:3] 0xf:	"g";
	op[0:3] 0xf:	"nle";
};

MOD bp SWITCH {
	segpref cs:	"pn";
	segpref ds:	"pt";
	segpref null:	/* nothing */;
};

MOD opsz SWITCH {
	osz b16:	["b16"];
	osz b32:	["b32"];
	osz b64:	["b64"];
};

MOD ioopsz SWITCH {
	MODE m16 oszpref 0:	["b16"];
	MODE m16 oszpref 1:	["b32"];
	MODE m32|m64 oszpref 0:	["b32"];
	MODE m32|m64 oszpref 1:	["b16"];
};

EXPR ioacca SWITCH {
	MODE m16 oszpref 0:	$ax;
	MODE m16 oszpref 1:	$eax;
	MODE m32|m64 oszpref 0:	$eax;
	MODE m32|m64 oszpref 1:	$ax;
};

MOD opesz SWITCH {
	MODE m16 oszpref 0:	["b16"];
	MODE m16 oszpref 1:	"b32";
	MODE m32 oszpref 0:	["b32"];
	MODE m32 oszpref 1:	"b16";
	MODE m64 oszpref 0:	["b64"];
	MODE m64 oszpref 1:	"b16";
};

MOD lock SWITCH {
	lockpref 0:		/* nothing */;
	lockpref 1 mod 0-2:	"lock";		// reject lock prefix if mod == 3 [ie. operand not in memory]
};

/* sequences */

SEQ domodrm {
	READ mrm;
	/* read SIB if needed */
	SWITCH {
		mod 0-2 asz a32|a64 rm 4:	READ sib;
		mod 0-2 asz a32|a64 rm 0-3|5-7:	/* nothing */
		mod 0-2 asz a16:		/* nothing */
		mod 3:				/* nothing */
	};
	/* read displacement if needed */
	SWITCH {
		mod 0 asz a16 rm 0-5|7:			/* nothing */
		mod 0 asz a16 rm 6:			READ LE d16;
		mod 0 asz a32|a64 rm 0-3|6-7:		/* nothing */
		mod 0 asz a32|a64 rm 4 sibb 0-4|6-7:	/* nothing */
		mod 0 asz a32|a64 rm 4 sibb 5:		READ LE d32;
		mod 0 asz a32|a64 rm 5:			READ LE d32;
		mod 1:					READ d8;
		mod 2 asz a16:				READ LE d16;
		mod 2 asz a32|a64:			READ LE d32;
		mod 3:					/* nothing */
	};
};

SEQ mova_addr SWITCH {
	asz a16:	READ LE d16;
	asz a32:	READ LE d32;
	asz a64:	READ LE d64;
};

SEQ readimma SWITCH {
	osz b16:	READ LE i16;
	osz b32|b64:	READ LE i32;
};

SEQ readnbtarg SWITCH {
	MODE m16 oszpref 0:	READ i16;
	MODE m16 oszpref 1:	READ i32;
	MODE m32 oszpref 0:	READ i32;
	MODE m32 oszpref 1:	READ i16;
	MODE m64:		READ i32;
};

/* cheat and use d16 for segment */
SEQ readfbtarg SWITCH {
	osz b16:		READ i16; READ d16;
	osz b32:		READ i32; READ d16;
};

EXPR fbtargseg IMM(d16);
ARG fbtarg SWITCH {
	MODE m16 osz b16:	["b16"] IMM(i16);
	MODE m16 osz b32:	"b32" IMM(i32);
	MODE m32 osz b16:	"b16" IMM(i16);
	MODE m32 osz b32:	["b32"] IMM(i32);
};

ARG sbtarg SWITCH {
	MODE m16 oszpref 0:	["b16"] btarg8s16;
	MODE m16 oszpref 1:	"b32" btarg8s32;
	MODE m32 oszpref 0:	["b32"] btarg8s32;
	MODE m32 oszpref 1:	"b16" btarg8s16;
	MODE m64:		["b64"] btarg8s64;
};

ARG nbtarg SWITCH {
	MODE m16 oszpref 0:	["b16"] btarg16;
	MODE m16 oszpref 1:	"b32" btarg32;
	MODE m32 oszpref 0:	["b32"] btarg32;
	MODE m32 oszpref 1:	"b16" btarg16;
	MODE m64:		["b64"] btarg32s64;
};

OPFIELD aop 3;

IGROUP alu SWITCH {
	aop 0: "add";
	aop 1: "or";
	aop 2: "adc";
	aop 3: "sbb";
	aop 4: "and";
	aop 5: "sub";
	aop 6: "xor";
	aop 7: "cmp";
};

IGROUP alulock SWITCH {
	aop 0: "add" MOD lock;
	aop 1: "or" MOD lock;
	aop 2: "adc" MOD lock;
	aop 3: "sbb" MOD lock;
	aop 4: "and" MOD lock;
	aop 5: "sub" MOD lock;
	aop 6: "xor" MOD lock;
	aop 7: "cmp";
};

IGROUP shift SWITCH {
	reg 0: "rol";
	reg 1: "ror";
	reg 2: "rcl";
	reg 3: "rcr";
	reg 4: "shl";
	reg 4: "sal";
	reg 5: "shr";
	reg 7: "sar";
};

/* XXX: what the fuck shall we do with the lock prefix? */
SEQ opm SWITCH {
	op 0x00/0xf7:			SEQ domodrm;			INSN IGROUP alulock ["b8"] rm8 reg8;
	op 0x01/0xf7:			SEQ domodrm;			INSN IGROUP alulock MOD opsz rma rega;
	op 0x02/0xf7:			SEQ domodrm;			INSN IGROUP alu ["b8"] reg8 rm8;
	op 0x03/0xf7:			SEQ domodrm;			INSN IGROUP alu MOD opsz reg16 rm16;
	op 0x04/0xf7:			READ i8; LET aop = op[3:5];	INSN IGROUP alu ["b8"] $al imm8;
	op 0x05/0xf7:			SEQ readimma; LET aop = op[3:5];	INSN IGROUP alu MOD opsz acca imma;
	op 0x06 MODE m16|m32:						INSN "push" MOD opsz $es;
	op 0x0e MODE m16|m32:						INSN "push" MOD opsz $cs;
	op 0x16 MODE m16|m32:						INSN "push" MOD opsz $ss;
	op 0x1e MODE m16|m32:						INSN "push" MOD opsz $ds;
	/* 0x26, 0x2e, 0x36, 0x3e segment prefixes - handled in oproot */
	op 0x07 MODE m16|m32:						INSN "pop" MOD opsz $es;
	op 0x0f FEATURE op286:		READ op; GOTO op0f;
	op 0x0f MODE m16|m32 FEATURE op8086:				INSN "pop" MOD opsz $cs;
	op 0x17 MODE m16|m32:						INSN "pop" MOD opsz $ss;
	op 0x1f MODE m16|m32:						INSN "pop" MOD opsz $ds;
	op 0x27 MODE m16|m32:						INSN "daa";
	op 0x2f MODE m16|m32:						INSN "das";
	op 0x37 MODE m16|m32:						INSN "aaa";
	op 0x3f MODE m16|m32:						INSN "aas";
	/* 0x40-0x4f used for rex prefix in 64-bit mode - handled in oproot */
	op 0x40/0xf8 MODE m16|m32:					INSN "inc" MOD opsz oprega;
	op 0x48/0xf8 MODE m16|m32:					INSN "dec" MOD opsz oprega;
	op 0x50/0xf8 MODE m16|m32:					INSN "push" MOD opsz oprega;
	op 0x50/0xf8 MODE m64 oszpref 1:				INSN "push" ["b16"] opreg16;
	op 0x50/0xf8 MODE m64 oszpref 0:				INSN "push" ["b64"] opreg64;
	op 0x58/0xf8 MODE m16|m32:					INSN "pop" MOD opsz oprega;
	op 0x58/0xf8 MODE m64 oszpref 1:				INSN "pop" ["b16"] opreg16;
	op 0x58/0xf8 MODE m64 oszpref 0:				INSN "pop" ["b64"] opreg64;
	op 0x60 MODE m16|m32 FEATURE op80186:				INSN "pusha" MOD opsz;
	op 0x61 MODE m16|m32 FEATURE op80186:				INSN "popa" MOD opsz;
	op 0x62 MODE m16|m32 FEATURE op80186:	SEQ domodrm;		INSN "bound" MOD opsz rega mem;
	op 0x64 MODE m16|m32 FEATURE op286:	SEQ domodrm;		INSN "arpl" rm16 reg16; // XXX: should be rejected in real mode
	op 0x63 rexw 1:			SEQ domodrm;			INSN "movsx" ["b64"] reg64 ["b32"] rm32; // XXX: it's valid without REX.W, but "discouraged"... wtf?
	/* 0x64-0x67: segment and size prefixes - handled in oproot */
	op 0x68 MODE m16|m32 FEATURE op80186:	SEQ readimma;		INSN "push" MOD opsz imma;
	op 0x68 MODE m64 oszpref 1:	READ i16;			INSN "push" ["b16"] imm16;
	op 0x68 MODE m64 oszpref 0:	READ i32;			INSN "push" ["b64"] eimm32;
	op 0x69 FEATURE op80186:	SEQ domodrm; SEQ readimma;	INSN "imul" MOD opsz rega rma imma;
	op 0x6a MODE m16|m32 FEATURE op80186:	READ i8;		INSN "push" MOD opsz imm8sa;
	op 0x6a MODE m64 oszpref 1:	READ i8;			INSN "push" ["b16"] imm8s16;
	op 0x6a MODE m64 oszpref 0:	READ i8;			INSN "push" ["b64"] imm8s64;
	op 0x6b FEATURE op80186:	SEQ domodrm; READ i8;		INSN "imul" MOD opsz rega rma imm8sa;
	op 0x6c FEATURE op80186:					INSN "ins" MOD rep "b8" strdst;
	op 0x6d FEATURE op80186:					INSN "ins" MOD rep MOD opsz strdst;
	op 0x6e FEATURE op80186:					INSN "outs" MOD rep "b8" strsrc;
	op 0x6f FEATURE op80186:					INSN "outs" MOD rep MOD opsz strsrc;
	op 0x70/0xf0:			READ i8;			INSN "j" MOD bp MOD pred ["short"] sbtarg;
	op 0x80:			SEQ domodrm; READ i8; LET aop = reg;	INSN IGROUP alulock ["b8"] rm8 imm8;
	op 0x81:			SEQ domodrm; SEQ readimma; LET aop = reg;	INSN IGROUP alulock MOD opsz rma imma;
	op 0x83:			SEQ domodrm; READ i8; LET aop = reg;	INSN IGROUP alulock MOD opsz rma imm8sa;
	op 0x84:			SEQ domodrm;			INSN "test" ["b8"] rm8 reg8;
	op 0x85:			SEQ domodrm;			INSN "test" MOD opsz rma rega;
	op 0x86:			SEQ domodrm;			INSN "xchg" ["b8"] rm8 reg8;
	op 0x87:			SEQ domodrm;			INSN "xchg" MOD opsz rma rega;
	op 0x86:			SEQ domodrm;			INSN "xchg" ["b8"] reg8 rm8;
	op 0x87:			SEQ domodrm;			INSN "xchg" MOD opsz rega rma;
	op 0x88:			SEQ domodrm;			INSN "mov" ["b8"] rm8 reg8;
	op 0x89:			SEQ domodrm;			INSN "mov" MOD opsz rma rega;
	op 0x8a:			SEQ domodrm;			INSN "mov" ["b8"] reg8 rm8;
	op 0x8b:			SEQ domodrm;			INSN "mov" MOD opsz reg16 rm16;
	op 0x8c:			SEQ domodrm;			INSN "mov" ["b16"] rm16 sreg; // XXX: manual mentions 64-bit forms...
	op 0x8d:			SEQ domodrm;			INSN "lea" MOD opsz rega mem;
	op 0x8e:			SEQ domodrm;			INSN "mov" ["b16"] sreg_nocs rm16;
	op 0x8f:			SEQ domodrm;			SWITCH {
		reg 0 MODE m16|m32:					INSN "pop" MOD opsz rma;
		reg 0 MODE m64 oszpref 1:				INSN "pop" ["b16"] rm16;
		reg 0 MODE m64 oszpref 0:				INSN "pop" ["b64"] rm64;
	};
	op 0x90 rexr 0 reppref repz:					INSN "pause";
	op 0x90 rexr 0:							INSN "nop";
	op 0x90 rexr 1:							INSN "xchg" MOD opsz acca oprega;
	op 0x91-0x97:							INSN "xchg" MOD opsz acca oprega;
	op 0x90 rexr 1:							INSN "xchg" MOD opsz oprega acca;
	op 0x91-0x97:							INSN "xchg" MOD opsz oprega acca;
	op 0x98 osz b16:						INSN "cbw";
	op 0x98 osz b32:						INSN "cwde";
	op 0x98 osz b64:						INSN "cdqe";
	op 0x99 osz b16:						INSN "cwd";
	op 0x99 osz b32:						INSN "cdq";
	op 0x99 osz b64:						INSN "cqo";
	op 0x9a MODE m16|m32:		SEQ readfbtarg;			INSN "lcall" fbtargseg fbtarg;		// XXX: better syntax?
	op 0x9c:							INSN "pushf" MOD opesz;
	op 0x9d:							INSN "popf" MOD opesz;
	op 0x9e MODE m16|m32:						INSN "sahf";
	op 0x9e MODE m64 FEATURE lahf64:				INSN "sahf";
	op 0x9f MODE m16|m32:						INSN "lahf";
	op 0x9f MODE m64 FEATURE lahf64:				INSN "lahf";
	op 0xa0:			SEQ mova_addr;			INSN "mov" $al mova_mem;
	op 0xa1:			SEQ mova_addr;			INSN "mov" acca mova_mem;
	op 0xa2:			SEQ mova_addr;			INSN "mov" mova_mam $al;
	op 0xa3:			SEQ mova_addr;			INSN "mov" mova_mem acca;
	op 0xa4:							INSN "movs" MOD rep "b8" strdst strsrc;
	op 0xa5:							INSN "movs" MOD rep MOD opsz strdst strsrc;
	op 0xa6:							INSN "cmps" MOD repcc "b8" strdst strsrc;
	op 0xa7:							INSN "cmps" MOD repcc MOD opsz strdst strsrc;
	op 0xa8:			READ i8;			INSN "test" ["b8"] $al imm8;
	op 0xa9:			SEQ readimma;			INSN "test" MOD opsz acca imma;
	op 0xaa:							INSN "stos" MOD rep "b8" strdst;
	op 0xab:							INSN "stos" MOD rep MOD opsz strdst;
	op 0xac:							INSN "lods" MOD rep "b8" strsrc;
	op 0xad:							INSN "lods" MOD rep MOD opsz strsrc;
	op 0xae:							INSN "scas" MOD repcc "b8" strdst;
	op 0xaf:							INSN "scas" MOD repcc MOD opsz strdst;
	op 0xb0/0xf8:			READ i8;			INSN "mov" opreg8 imm8;
	op 0xb8/0xf8 osz b16:		READ LE i16;			INSN "mov" opreg16 imm16;
	op 0xb8/0xf8 osz b32:		READ LE i32;			INSN "mov" opreg32 imm32;
	op 0xb8/0xf8 osz b64:		READ LE i64;			INSN "mov" opreg64 imm64; // needs a special case: the only insn that allows imm64
	op 0xc0 FEATURE op80186:	SEQ domodrm; READ i8;		INSN IGROUP shift ["b8"] rm8 imm8;
	op 0xc1 FEATURE op80186:	SEQ domodrm; READ i8;		INSN IGROUP shift MOD opsz rma imm8;
	op 0xc2:			READ i16;			INSN "ret" MOD opesz imm16;
	op 0xc3:							INSN "ret" MOD opesz;
	op 0xc4 MODE m16|m32:		SEQ domodrm;			SWITCH {
		mod 0-2:						INSN "les" MOD opsz rega mem;
		/* 3: vex */
	};
	op 0xc5 MODE m16|m32:		SEQ domodrm;			SWITCH {
		mod 0-2:						INSN "lds" MOD opsz rega mem;
		/* 3: vex */
	};
	op 0xc6:			SEQ domodrm; READ i8;		INSN "mov" rm8 imm8;
	op 0xc7:			SEQ domodrm; SEQ readimma;	INSN "mov" rma imma;
	op 0xc8 FEATURE op80186:	READ i16; READ d8;		INSN "leave" MOD opesz imm16 IMM(d8);
	op 0xc9 FEATURE op80186:					INSN "leave" MOD opesz;
	op 0xca:			READ i16;			INSN "lret" MOD opesz imm16;
	op 0xcb:							INSN "lret" MOD opesz;
	op 0xcc:							INSN "int3";
	op 0xcd:			READ i8;			INSN "int" imm8;
	op 0xce MODE m16|m32:						INSN "into";
	op 0xcf:							INSN "iret" MOD opsz;
	op 0xd0:			SEQ domodrm;			INSN IGROUP shift ["b8"] rm8 1;
	op 0xd1:			SEQ domodrm;			INSN IGROUP shift MOD opsz rma 1;
	op 0xd2:			SEQ domodrm;			INSN IGROUP shift ["b8"] rm8 $cl;
	op 0xd3:			SEQ domodrm;			INSN IGROUP shift MOD opsz rma $cl;
	op 0xd4 MODE m16|m32:		READ i8;			INSN "aam" imm8;
	op 0xd5 MODE m16|m32:		READ i8;			INSN "aad" imm8;
	op 0xd7:							INSN "xlat" xlatsrc;
	op 0xe0:			READ i8;			INSN "loopnz" ["short"] sbtarg loopreg;
	op 0xe0:			READ i8;			INSN "loopne" ["short"] sbtarg loopreg;
	op 0xe1:			READ i8;			INSN "loopz" ["short"] sbtarg loopreg;
	op 0xe1:			READ i8;			INSN "loope" ["short"] sbtarg loopreg;
	op 0xe2:			READ i8;			INSN "loop" ["short"] sbtarg loopreg;
	op 0xe3:			READ i8;			INSN "jcxz" ["short"] sbtarg loopreg;
	op 0xe4:			READ i8;			INSN "in" ["b8"] $al imm8;
	op 0xe5:			READ i8;			INSN "in" MOD ioopsz ioacca imm8;
	op 0xe6:			READ i8;			INSN "out" ["b8"] imm8 $al;
	op 0xe7:			READ i8;			INSN "out" MOD ioopsz imm8 ioacca;
	op 0xe8:			SEQ readnbtarg;			INSN "call" ["near"] nbtarg;
	op 0xe9:			SEQ readnbtarg;			INSN "jmp" ["near"] nbtarg;
	op 0xea MODE m16|m32:		SEQ readfbtarg;			INSN "ljmp" fbtargseg fbtarg;
	op 0xeb:			READ i8;			INSN "jmp" ["short"] sbtarg;
	op 0xec:							INSN "in" ["b8"] $al $dx;
	op 0xed:							INSN "in" MOD ioopsz ioacca $dx;
	op 0xee:							INSN "out" ["b8"] $dx $al;
	op 0xef:							INSN "out" MOD ioopsz $dx ioacca;
	/* 0xf0 - lock prefix - handled in oproot */
	/* 0xf2, 0xf3 - rep prefixes - handled in oproot */
	op 0xf4:							INSN "hlt";
	op 0xf5:							INSN "cmc";
	op 0xf6:			SEQ domodrm;			SWITCH {
		reg 0:			READ i8;			INSN "test" ["b8"] rm8 imm8;
		reg 2:							INSN "not" MOD lock ["b8"] rm8;
		reg 3:							INSN "neg" MOD lock ["b8"] rm8;
		reg 4:							INSN "mul" ["b8"] rm8;
		reg 5:							INSN "imul" ["b8"] rm8;
		reg 6:							INSN "div" ["b8"] rm8;
		reg 7:							INSN "idiv" ["b8"] rm8;
	};
	op 0xf7:			SEQ domodrm;			SWITCH {
		reg 0:			SEQ readimma;			INSN "test" MOD opsz rma imma;
		reg 2:							INSN "not" MOD lock MOD opsz rma;
		reg 3:							INSN "neg" MOD lock MOD opsz rma;
		reg 4:							INSN "mul" MOD opsz rma;
		reg 5:							INSN "imul" MOD opsz rma;
		reg 6:							INSN "div" MOD opsz rma;
		reg 7:							INSN "idiv" MOD opsz rma;
	};
	op 0xf8:							INSN "clc";
	op 0xf9:							INSN "stc";
	op 0xfa:							INSN "cli";
	op 0xfb:							INSN "sti";
	op 0xfc:							INSN "cld";
	op 0xfd:							INSN "std";
	op 0xfe:			SEQ domodrm;			SWITCH {
		reg 0:							INSN "inc" MOD lock ["b8"] rm8;
		reg 1:							INSN "dec" MOD lock ["b8"] rm8;
	};
	op 0xff:			SEQ domodrm;			SWITCH {
		reg 0:							INSN "inc" MOD lock MOD opsz rma;
		reg 1:							INSN "dec" MOD lock MOD opsz rma;
		reg 2:							INSN "call" MOD opsz rma;
		reg 3:							INSN "lcall" MOD opsz mem;
		reg 4:							INSN "jmp" MOD opsz rma;
		reg 5:							INSN "ljmp" MOD opsz mem;
		reg 6 MODE m16|m32:					INSN "push" MOD opsz rma;
		reg 6 MODE m64 oszpref 1:				INSN "push" ["b16"] rm16;
		reg 6 MODE m64 oszpref 0:				INSN "push" ["b64"] rm64;
	};
};

SEQ op0f SWITCH {
	op 0x00:			SEQ domodrm;			SWITCH {
		reg 0 FEATURE op286:					INSN "sldt" rm16;
		reg 1 FEATURE op286:					INSN "str" rm16;
		reg 2 FEATURE op286:					INSN "lldt" rm16;
		reg 3 FEATURE op286:					INSN "ltr" rm16;
		reg 4 FEATURE op286:					INSN "verr" rm16;
		reg 5 FEATURE op286:					INSN "verw" rm16;
	};
	op 0x01:			SEQ domodrm;			SWITCH {
		reg 0 mod 0-2 FEATURE op286:				INSN "sgdt" mem;
		reg 1 mod 0-2 FEATURE op286:				INSN "sidt" mem;
		reg 2 mod 0-2 FEATURE op286:				INSN "lgdt" mem;
		reg 2 mod 3 rm 0 FEATURE xsave:				INSN "xgetbv";
		reg 2 mod 3 rm 1 FEATURE xsave:				INSN "xsetbv";
		reg 3 mod 0-2 FEATURE op286:				INSN "lidt" mem;
		reg 4 FEATURE op286:					INSN "smsw" rm16;
		reg 6 FEATURE op286:					INSN "lmsw" rm16;
		reg 7 mod 0-2 FEATURE op486:				INSN "invlpg" mem;
		reg 7 mod 3 rm 0 MODE m64:				INSN "swapgs";
		reg 7 mod 3 rm 1 FEATURE rdtscp:			INSN "rdtscp";
	};
	op 0x02 FEATURE op286:		SEQ domodrm;			INSN "lar" MOD opsz rega rm16; // XXX: should be rejected in real mode
	op 0x03 FEATURE op286:		SEQ domodrm;			INSN "lsl" MOD opsz rega rm16;
	op 0x05 FEATURE syscall:					INSN "syscall"; // XXX: intel and amd don't agree on valid MODEs
	op 0x06 FEATURE op286:						INSN "clts";
	op 0x07 FEATURE syscall rexw 0:					INSN "sysret" ["b32"];
	op 0x07 FEATURE syscall rexw 1:					INSN "sysret" "b64";
	op 0x08 FEATURE op486:						INSN "invd";
	op 0x09 FEATURE op486:						INSN "wbinvd";
	op 0x0b:							INSN "ud2";
	op 0x1f:			SEQ domodrm;			SWITCH {
		reg 0 FEATURE nop:					INSN "nop" MOD opsz rma;
	};
	op 0x20/0xfc FEATURE op386:	SEQ domodrm;			SWITCH {
		op 0x20 mod 3 MODE m16|m32:				INSN "mov" rm32 creg;
		op 0x20 mod 3 MODE m64:					INSN "mov" rm64 creg;
		op 0x21 mod 3 MODE m16|m32:				INSN "mov" rm32 dreg;
		op 0x21 mod 3 MODE m64:					INSN "mov" rm64 dreg;
		op 0x22 mod 3 MODE m16|m32:				INSN "mov" creg rm32;
		op 0x22 mod 3 MODE m64:					INSN "mov" creg rm64;
		op 0x23 mod 3 MODE m16|m32:				INSN "mov" dreg rm32;
		op 0x23 mod 3 MODE m64:					INSN "mov" dreg rm64;
	};
	op 0x24/0xfd FEATURE testreg:	SEQ domodrm;			SWITCH {
		op 0x24 mod 3 MODE m16|m32:				INSN "mov" rm32 treg;
		op 0x24 mod 3 MODE m64:					INSN "mov" rm64 treg;
		op 0x26 mod 3 MODE m16|m32:				INSN "mov" treg rm32;
		op 0x26 mod 3 MODE m64:					INSN "mov" treg rm64;
	};
	op 0x30 FEATURE msr:						INSN "wrmsr";
	op 0x31 FEATURE tsc:						INSN "rdtsc";
	op 0x32 FEATURE msr:						INSN "rdmsr";
	op 0x33 FEATURE rdpmc:						INSN "rdpmc";
	op 0x34 FEATURE sep:						INSN "sysenter"; // XXX: intel and amd don't agree on valid MODEs
	op 0x35 FEATURE sep rexw 0:					INSN "sysexit" ["b32"];
	op 0x35 FEATURE sep rexw 1:					INSN "sysexit" "b64";
	op 0x38:			READ op; GOTO op0f38;
	op 0x40/0xf0 FEATURE cmov:	SEQ domodrm;			INSN "cmov" MOD pred MOD opsz rega rma;
	op 0x80/0xf0 FEATURE op386:	SEQ readnbtarg;			INSN "j" MOD bp MOD pred ["near"] nbtarg;
	op 0x90/0xf0 FEATURE op386:	SEQ domodrm;			INSN "set" MOD pred rm8;
	op 0xa0 MODE m16|m32 FEATURE op386:				INSN "push" MOD opsz $fs;
	op 0xa0 MODE m64 oszpref 1:					INSN "push" ["b16"] $fs;
	op 0xa0 MODE m64 oszpref 0:					INSN "push" ["b64"] $fs;
	op 0xa1 MODE m16|m32 FEATURE op386:				INSN "pop" MOD opsz $fs;
	op 0xa1 MODE m64 oszpref 1:					INSN "pop" ["b16"] $fs;
	op 0xa1 MODE m64 oszpref 0:					INSN "pop" ["b64"] $fs;
	op 0xa2 FEATURE cpuid:						INSN "cpuid";
	op 0xa3 FEATURE op386:		SEQ domodrm;			INSN "bt" MOD opsz rma rega;
	op 0xa4 FEATURE op386:		SEQ domodrm; READ i8;		INSN "shld" MOD opsz rma rega imm8;
	op 0xa5 FEATURE op386:		SEQ domodrm;			INSN "shld" MOD opsz rma rega $cl;
	op 0xa8 MODE m16|m32 FEATURE op386:				INSN "push" MOD opsz $gs;
	op 0xa8 MODE m64 oszpref 1:					INSN "push" ["b16"] $gs;
	op 0xa8 MODE m64 oszpref 0:					INSN "push" ["b64"] $gs;
	op 0xa9 MODE m16|m32 FEATURE op386:				INSN "pop" MOD opsz $gs;
	op 0xa9 MODE m64 oszpref 1:					INSN "pop" ["b16"] $gs;
	op 0xa9 MODE m64 oszpref 0:					INSN "pop" ["b64"] $gs;
	op 0xaa FEATURE smm:						INSN "rsm";
	op 0xab FEATURE op386:		SEQ domodrm;			INSN "bts" MOD lock MOD opsz rma rega;
	op 0xac FEATURE op386:		SEQ domodrm; READ i8;		INSN "shrd" MOD opsz rma rega imm8;
	op 0xad FEATURE op386:		SEQ domodrm;			INSN "shrd" MOD opsz rma rega $cl;
	op 0xae:			SEQ domodrm;			SWITCH {
		reg 4 mod 0-2 rexw 0 FEATURE xsave:			INSN "xsave" ["b32"] mem;
		reg 4 mod 0-2 rexw 1 FEATURE xsave:			INSN "xsave" "b64" mem;
		reg 5 mod 0-2 rexw 0 FEATURE xsave:			INSN "xrstor" ["b32"] mem;
		reg 5 mod 0-2 rexw 1 FEATURE xsave:			INSN "xrstor" "b64" mem;
		reg 6 mod 0-2 rexw 0 FEATURE xsaveopt:			INSN "xsaveopt" ["b32"] mem;
		reg 6 mod 0-2 rexw 1 FEATURE xsaveopt:			INSN "xsaveopt" "b64" mem;
	};
	op 0xaf FEATURE op386:		SEQ domodrm;			INSN "imul" MOD opsz rega rma;
	op 0xb0 FEATURE op486:		SEQ domodrm;			INSN "cmpxchg" MOD lock ["b8"] rm8 reg8;
	op 0xb1 FEATURE op486:		SEQ domodrm;			INSN "cmpxchg" MOD lock MOD opsz rma rega;
	op 0xb2 FEATURE op386:		SEQ domodrm;			INSN "lss" MOD opsz rega mem;
	op 0xb3 FEATURE op386:		SEQ domodrm;			INSN "btr" MOD lock MOD opsz rma rega;
	op 0xb4 FEATURE op386:		SEQ domodrm;			INSN "lfs" MOD opsz rega mem;
	op 0xb5 FEATURE op386:		SEQ domodrm;			INSN "lgs" MOD opsz rega mem;
	op 0xb6 FEATURE op386:		SEQ domodrm;			INSN "movzx" MOD opsz rega ["b8"] rm8;
	op 0xb7 rexw 0 FEATURE op386:	SEQ domodrm;			INSN "movzx" ["b32"] reg32 ["b16"] rm16;
	op 0xb7 rexw 1 FEATURE op386:	SEQ domodrm;			INSN "movzx" ["b64"] reg64 ["b16"] rm16;
	op 0xba:			SEQ domodrm;			SWITCH {
		reg 4 FEATURE op386:	READ i8;			INSN "bt" MOD opsz rma imm8;
		reg 5 FEATURE op386:	READ i8;			INSN "bts" MOD lock MOD opsz rma imm8;
		reg 6 FEATURE op386:	READ i8;			INSN "btr" MOD lock MOD opsz rma imm8;
		reg 7 FEATURE op386:	READ i8;			INSN "btc" MOD lock MOD opsz rma imm8;
	};
	op 0xbb FEATURE op386:		SEQ domodrm;			INSN "btc" MOD lock MOD opsz rma rega;
	op 0xbc FEATURE op386:		SEQ domodrm;			INSN "bsf" MOD opsz rega rma;
	op 0xbd FEATURE op386:		SEQ domodrm;			INSN "bsr" MOD opsz rega rma;
	op 0xbe FEATURE op386:		SEQ domodrm;			INSN "movsx" MOD opsz rega ["b8"] rm8;
	op 0xbf rexw 0 FEATURE op386:	SEQ domodrm;			INSN "movsx" ["b32"] reg32 ["b16"] rm16;
	op 0xbf rexw 1 FEATURE op386:	SEQ domodrm;			INSN "movsx" ["b64"] reg64 ["b16"] rm16;
	op 0xc0 FEATURE op486:		SEQ domodrm;			INSN "xadd" MOD lock ["b8"] rm8 reg8;
	op 0xc1 FEATURE op486:		SEQ domodrm;			INSN "xadd" MOD lock MOD opsz rma rega;
	op 0xc7:			SEQ domodrm;			SWITCH {
		reg 1 rexw 0 FEATURE cx8:				INSN "cmpxchg8b" MOD lock mem;
		reg 1 rexw 1 FEATURE cx16:				INSN "cmpxchg16b" MOD lock mem;
	};
	op 0xc8/0xf8 osz b32 FEATURE op486:				INSN "bswap" ["b32"] opreg32; // needs a special case: b16 variant doesn't exist
	op 0xc8/0xf8 osz b64 FEATURE op486:				INSN "bswap" ["b64"] opreg64;
};

SEQ op0f38 SWITCH {
	op 0xf0 FEATURE movbe:		SEQ domodrm;			INSN "movbe" rega rma;
	op 0xf1 FEATURE movbe:		SEQ domodrm;			INSN "movbe" rma rega;
};

SEQ oproot {
	READ op;
	SWITCH {
		op 0x26:		LET segpref = CONST es; GOTO oproot;
		op 0x2e:		LET segpref = CONST cs; GOTO oproot;
		op 0x36:		LET segpref = CONST ss; GOTO oproot;
		op 0x3e:		LET segpref = CONST ds; GOTO oproot;
		op 0x40/0xf0 MODE m64:	LET rexpresent = CONST 1; LET rex = op[0:3]; GOTO opm;
		op 0x64:		LET segpref = CONST fs; GOTO oproot;
		op 0x65:		LET segpref = CONST gs; GOTO oproot;
		op 0x66:		LET oszpref = CONST 1; GOTO oproot;
		op 0x67:		LET aszpref = CONST 1; GOTO oproot;
		op 0xf0:		LET lockpref = CONST 1; GOTO oproot;
		op 0xf2:		LET reppref = CONST repnz; GOTO oproot;
		op 0xf3:		LET reppref = CONST repz; GOTO oproot;
		/* default */:		GOTO opm;
	};
};
