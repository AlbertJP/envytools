Introduction

Time and timer-related registers are the same across each fuc engines
at the exception of PGRAPH CTXCTLs that lack TIME_LOW and TIME_HIGH.

[XXX: Check what timer-related registers are missing in PGRAPH CTXCTLs]

You can:

 - Read PTIMER's clock
 - Use a periodic timer: Generate an interrupt periodically
 - Use a watchdog/one-shot timer: Generate an interrupt once in the future


MMIO 0x020 / I[0x00800]: PERIODIC_PERIOD
  A 32-bit register defining the period of the periodic timer.
MMIO 0x024 / I[0x00900]: PERIODIC_TIME
  A 32-bit counter storing the time remaining before the tick.
MMIO 0x028 / I[0x00a00]: PERIODIC_ENABLE
  bit 1: Enable the periodic timer.

Fuc engines all have a periodic timer. This timer generates an interrupt
periodically on line 0.

More technically, this happens when PERIODIC_TIME reaches 0. This register
is decremented after each PTIMER's tick unless PERIODIC_ENABLE is clear.

The periodicity can be setup by setting the PERIODIC_PERIOD register to the number
of PTIMER ticks wanted.

[XXX: Check what is the actual time sourkce for this timer]

Operation (after each PTIMER tick):
	if (PERIODIC_ENABLE && PERIODIC_TIME > 0)
		PERIODIC_TIME = PERIODIC_TIME) - 1;

	if (PERIODIC_TIME == 0) {
		raise_interrupt(0);
		PERIODIC_TIME = PERIODIC_PERIOD;
	}


MMIO 0x02c / I[0x00b00]: TIME_LOW
MMIO 0x030 / I[0x00c00]: TIME_HIGH

These are just aliases for PTIMER's TIME_LOW and TIME_HIGH. Both of them are
32-bit counters.

See [ptimer.txt] for more information.


MMIO 0x034 / I[0x00d00]: WATCHDOG_TIME
MMIO 0x038 / I[0x00e00]: WATCHDOG_ENABLE

A watchdog is usually a timer that, when reaching 0, resets a microcontroler.
This is a mean of rebooting a microcontroler when it is stuck in an infinite loop.

A classic use of a watchdog is to set it before calling a sensitive function by
initializing it to, for instance, twice the usual time needed by this function to
be executed.

In fuc's case, the watchdog doesn't reboot the Âµc. Indeed, it is very similar to
the periodic timer. The differences are:

 - it generates an interrupt on line 1 instead of 0.
 - it manually needs to be reset

[XXX: Check what is the actual time source for this timer]

Operation (after each PTIMER tick):
	if (WATCHDOG_ENABLE && WATCHDOG_TIME > 0)
		WATCHDOG_TIME = WATCHDOG_TIME - 1;

	if (WATCHDOG_TIME == 0)
		raise_interrupt(1);
